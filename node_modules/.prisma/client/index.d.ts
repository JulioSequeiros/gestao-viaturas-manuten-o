
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Utilizador
 * 
 */
export type Utilizador = $Result.DefaultSelection<Prisma.$UtilizadorPayload>
/**
 * Model Viatura
 * 
 */
export type Viatura = $Result.DefaultSelection<Prisma.$ViaturaPayload>
/**
 * Model Manutencao
 * 
 */
export type Manutencao = $Result.DefaultSelection<Prisma.$ManutencaoPayload>
/**
 * Model Categoria
 * 
 */
export type Categoria = $Result.DefaultSelection<Prisma.$CategoriaPayload>
/**
 * Model Marcacao
 * 
 */
export type Marcacao = $Result.DefaultSelection<Prisma.$MarcacaoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Utilizadors
 * const utilizadors = await prisma.utilizador.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Utilizadors
   * const utilizadors = await prisma.utilizador.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.utilizador`: Exposes CRUD operations for the **Utilizador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Utilizadors
    * const utilizadors = await prisma.utilizador.findMany()
    * ```
    */
  get utilizador(): Prisma.UtilizadorDelegate<ExtArgs>;

  /**
   * `prisma.viatura`: Exposes CRUD operations for the **Viatura** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Viaturas
    * const viaturas = await prisma.viatura.findMany()
    * ```
    */
  get viatura(): Prisma.ViaturaDelegate<ExtArgs>;

  /**
   * `prisma.manutencao`: Exposes CRUD operations for the **Manutencao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Manutencaos
    * const manutencaos = await prisma.manutencao.findMany()
    * ```
    */
  get manutencao(): Prisma.ManutencaoDelegate<ExtArgs>;

  /**
   * `prisma.categoria`: Exposes CRUD operations for the **Categoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categoria.findMany()
    * ```
    */
  get categoria(): Prisma.CategoriaDelegate<ExtArgs>;

  /**
   * `prisma.marcacao`: Exposes CRUD operations for the **Marcacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Marcacaos
    * const marcacaos = await prisma.marcacao.findMany()
    * ```
    */
  get marcacao(): Prisma.MarcacaoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.5.2
   * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Utilizador: 'Utilizador',
    Viatura: 'Viatura',
    Manutencao: 'Manutencao',
    Categoria: 'Categoria',
    Marcacao: 'Marcacao'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'utilizador' | 'viatura' | 'manutencao' | 'categoria' | 'marcacao'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Utilizador: {
        payload: Prisma.$UtilizadorPayload<ExtArgs>
        fields: Prisma.UtilizadorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UtilizadorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilizadorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UtilizadorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilizadorPayload>
          }
          findFirst: {
            args: Prisma.UtilizadorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilizadorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UtilizadorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilizadorPayload>
          }
          findMany: {
            args: Prisma.UtilizadorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilizadorPayload>[]
          }
          create: {
            args: Prisma.UtilizadorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilizadorPayload>
          }
          createMany: {
            args: Prisma.UtilizadorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UtilizadorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilizadorPayload>
          }
          update: {
            args: Prisma.UtilizadorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilizadorPayload>
          }
          deleteMany: {
            args: Prisma.UtilizadorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UtilizadorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UtilizadorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilizadorPayload>
          }
          aggregate: {
            args: Prisma.UtilizadorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUtilizador>
          }
          groupBy: {
            args: Prisma.UtilizadorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UtilizadorGroupByOutputType>[]
          }
          count: {
            args: Prisma.UtilizadorCountArgs<ExtArgs>,
            result: $Utils.Optional<UtilizadorCountAggregateOutputType> | number
          }
        }
      }
      Viatura: {
        payload: Prisma.$ViaturaPayload<ExtArgs>
        fields: Prisma.ViaturaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ViaturaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ViaturaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ViaturaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ViaturaPayload>
          }
          findFirst: {
            args: Prisma.ViaturaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ViaturaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ViaturaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ViaturaPayload>
          }
          findMany: {
            args: Prisma.ViaturaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ViaturaPayload>[]
          }
          create: {
            args: Prisma.ViaturaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ViaturaPayload>
          }
          createMany: {
            args: Prisma.ViaturaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ViaturaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ViaturaPayload>
          }
          update: {
            args: Prisma.ViaturaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ViaturaPayload>
          }
          deleteMany: {
            args: Prisma.ViaturaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ViaturaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ViaturaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ViaturaPayload>
          }
          aggregate: {
            args: Prisma.ViaturaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateViatura>
          }
          groupBy: {
            args: Prisma.ViaturaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ViaturaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ViaturaCountArgs<ExtArgs>,
            result: $Utils.Optional<ViaturaCountAggregateOutputType> | number
          }
        }
      }
      Manutencao: {
        payload: Prisma.$ManutencaoPayload<ExtArgs>
        fields: Prisma.ManutencaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ManutencaoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ManutencaoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload>
          }
          findFirst: {
            args: Prisma.ManutencaoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ManutencaoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload>
          }
          findMany: {
            args: Prisma.ManutencaoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload>[]
          }
          create: {
            args: Prisma.ManutencaoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload>
          }
          createMany: {
            args: Prisma.ManutencaoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ManutencaoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload>
          }
          update: {
            args: Prisma.ManutencaoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload>
          }
          deleteMany: {
            args: Prisma.ManutencaoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ManutencaoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ManutencaoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ManutencaoPayload>
          }
          aggregate: {
            args: Prisma.ManutencaoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateManutencao>
          }
          groupBy: {
            args: Prisma.ManutencaoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ManutencaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ManutencaoCountArgs<ExtArgs>,
            result: $Utils.Optional<ManutencaoCountAggregateOutputType> | number
          }
        }
      }
      Categoria: {
        payload: Prisma.$CategoriaPayload<ExtArgs>
        fields: Prisma.CategoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          findFirst: {
            args: Prisma.CategoriaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          findMany: {
            args: Prisma.CategoriaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>[]
          }
          create: {
            args: Prisma.CategoriaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          createMany: {
            args: Prisma.CategoriaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CategoriaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          update: {
            args: Prisma.CategoriaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          deleteMany: {
            args: Prisma.CategoriaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoriaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          aggregate: {
            args: Prisma.CategoriaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategoria>
          }
          groupBy: {
            args: Prisma.CategoriaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriaCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriaCountAggregateOutputType> | number
          }
        }
      }
      Marcacao: {
        payload: Prisma.$MarcacaoPayload<ExtArgs>
        fields: Prisma.MarcacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MarcacaoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MarcacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MarcacaoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MarcacaoPayload>
          }
          findFirst: {
            args: Prisma.MarcacaoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MarcacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MarcacaoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MarcacaoPayload>
          }
          findMany: {
            args: Prisma.MarcacaoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MarcacaoPayload>[]
          }
          create: {
            args: Prisma.MarcacaoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MarcacaoPayload>
          }
          createMany: {
            args: Prisma.MarcacaoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MarcacaoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MarcacaoPayload>
          }
          update: {
            args: Prisma.MarcacaoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MarcacaoPayload>
          }
          deleteMany: {
            args: Prisma.MarcacaoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MarcacaoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MarcacaoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MarcacaoPayload>
          }
          aggregate: {
            args: Prisma.MarcacaoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMarcacao>
          }
          groupBy: {
            args: Prisma.MarcacaoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MarcacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.MarcacaoCountArgs<ExtArgs>,
            result: $Utils.Optional<MarcacaoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UtilizadorCountOutputType
   */

  export type UtilizadorCountOutputType = {
    viaturas: number
  }

  export type UtilizadorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    viaturas?: boolean | UtilizadorCountOutputTypeCountViaturasArgs
  }

  // Custom InputTypes

  /**
   * UtilizadorCountOutputType without action
   */
  export type UtilizadorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UtilizadorCountOutputType
     */
    select?: UtilizadorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UtilizadorCountOutputType without action
   */
  export type UtilizadorCountOutputTypeCountViaturasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ViaturaWhereInput
  }



  /**
   * Count Type ViaturaCountOutputType
   */

  export type ViaturaCountOutputType = {
    manutencoes: number
    Marcacao: number
  }

  export type ViaturaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manutencoes?: boolean | ViaturaCountOutputTypeCountManutencoesArgs
    Marcacao?: boolean | ViaturaCountOutputTypeCountMarcacaoArgs
  }

  // Custom InputTypes

  /**
   * ViaturaCountOutputType without action
   */
  export type ViaturaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ViaturaCountOutputType
     */
    select?: ViaturaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ViaturaCountOutputType without action
   */
  export type ViaturaCountOutputTypeCountManutencoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManutencaoWhereInput
  }


  /**
   * ViaturaCountOutputType without action
   */
  export type ViaturaCountOutputTypeCountMarcacaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarcacaoWhereInput
  }



  /**
   * Count Type CategoriaCountOutputType
   */

  export type CategoriaCountOutputType = {
    manutencoes: number
  }

  export type CategoriaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manutencoes?: boolean | CategoriaCountOutputTypeCountManutencoesArgs
  }

  // Custom InputTypes

  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaCountOutputType
     */
    select?: CategoriaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeCountManutencoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManutencaoWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Utilizador
   */

  export type AggregateUtilizador = {
    _count: UtilizadorCountAggregateOutputType | null
    _avg: UtilizadorAvgAggregateOutputType | null
    _sum: UtilizadorSumAggregateOutputType | null
    _min: UtilizadorMinAggregateOutputType | null
    _max: UtilizadorMaxAggregateOutputType | null
  }

  export type UtilizadorAvgAggregateOutputType = {
    id: number | null
  }

  export type UtilizadorSumAggregateOutputType = {
    id: number | null
  }

  export type UtilizadorMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    isAdmin: boolean | null
  }

  export type UtilizadorMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    isAdmin: boolean | null
  }

  export type UtilizadorCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    isAdmin: number
    _all: number
  }


  export type UtilizadorAvgAggregateInputType = {
    id?: true
  }

  export type UtilizadorSumAggregateInputType = {
    id?: true
  }

  export type UtilizadorMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    isAdmin?: true
  }

  export type UtilizadorMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    isAdmin?: true
  }

  export type UtilizadorCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    isAdmin?: true
    _all?: true
  }

  export type UtilizadorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilizador to aggregate.
     */
    where?: UtilizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilizadors to fetch.
     */
    orderBy?: UtilizadorOrderByWithRelationInput | UtilizadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UtilizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilizadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Utilizadors
    **/
    _count?: true | UtilizadorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UtilizadorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UtilizadorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UtilizadorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UtilizadorMaxAggregateInputType
  }

  export type GetUtilizadorAggregateType<T extends UtilizadorAggregateArgs> = {
        [P in keyof T & keyof AggregateUtilizador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUtilizador[P]>
      : GetScalarType<T[P], AggregateUtilizador[P]>
  }




  export type UtilizadorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UtilizadorWhereInput
    orderBy?: UtilizadorOrderByWithAggregationInput | UtilizadorOrderByWithAggregationInput[]
    by: UtilizadorScalarFieldEnum[] | UtilizadorScalarFieldEnum
    having?: UtilizadorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UtilizadorCountAggregateInputType | true
    _avg?: UtilizadorAvgAggregateInputType
    _sum?: UtilizadorSumAggregateInputType
    _min?: UtilizadorMinAggregateInputType
    _max?: UtilizadorMaxAggregateInputType
  }

  export type UtilizadorGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    isAdmin: boolean
    _count: UtilizadorCountAggregateOutputType | null
    _avg: UtilizadorAvgAggregateOutputType | null
    _sum: UtilizadorSumAggregateOutputType | null
    _min: UtilizadorMinAggregateOutputType | null
    _max: UtilizadorMaxAggregateOutputType | null
  }

  type GetUtilizadorGroupByPayload<T extends UtilizadorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UtilizadorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UtilizadorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UtilizadorGroupByOutputType[P]>
            : GetScalarType<T[P], UtilizadorGroupByOutputType[P]>
        }
      >
    >


  export type UtilizadorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    isAdmin?: boolean
    viaturas?: boolean | Utilizador$viaturasArgs<ExtArgs>
    _count?: boolean | UtilizadorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["utilizador"]>

  export type UtilizadorSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    isAdmin?: boolean
  }

  export type UtilizadorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    viaturas?: boolean | Utilizador$viaturasArgs<ExtArgs>
    _count?: boolean | UtilizadorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UtilizadorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Utilizador"
    objects: {
      viaturas: Prisma.$ViaturaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      isAdmin: boolean
    }, ExtArgs["result"]["utilizador"]>
    composites: {}
  }


  type UtilizadorGetPayload<S extends boolean | null | undefined | UtilizadorDefaultArgs> = $Result.GetResult<Prisma.$UtilizadorPayload, S>

  type UtilizadorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UtilizadorFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UtilizadorCountAggregateInputType | true
    }

  export interface UtilizadorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Utilizador'], meta: { name: 'Utilizador' } }
    /**
     * Find zero or one Utilizador that matches the filter.
     * @param {UtilizadorFindUniqueArgs} args - Arguments to find a Utilizador
     * @example
     * // Get one Utilizador
     * const utilizador = await prisma.utilizador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UtilizadorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UtilizadorFindUniqueArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Utilizador that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UtilizadorFindUniqueOrThrowArgs} args - Arguments to find a Utilizador
     * @example
     * // Get one Utilizador
     * const utilizador = await prisma.utilizador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UtilizadorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilizadorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Utilizador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorFindFirstArgs} args - Arguments to find a Utilizador
     * @example
     * // Get one Utilizador
     * const utilizador = await prisma.utilizador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UtilizadorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilizadorFindFirstArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Utilizador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorFindFirstOrThrowArgs} args - Arguments to find a Utilizador
     * @example
     * // Get one Utilizador
     * const utilizador = await prisma.utilizador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UtilizadorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilizadorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Utilizadors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Utilizadors
     * const utilizadors = await prisma.utilizador.findMany()
     * 
     * // Get first 10 Utilizadors
     * const utilizadors = await prisma.utilizador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const utilizadorWithIdOnly = await prisma.utilizador.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UtilizadorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilizadorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Utilizador.
     * @param {UtilizadorCreateArgs} args - Arguments to create a Utilizador.
     * @example
     * // Create one Utilizador
     * const Utilizador = await prisma.utilizador.create({
     *   data: {
     *     // ... data to create a Utilizador
     *   }
     * })
     * 
    **/
    create<T extends UtilizadorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UtilizadorCreateArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Utilizadors.
     *     @param {UtilizadorCreateManyArgs} args - Arguments to create many Utilizadors.
     *     @example
     *     // Create many Utilizadors
     *     const utilizador = await prisma.utilizador.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UtilizadorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilizadorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Utilizador.
     * @param {UtilizadorDeleteArgs} args - Arguments to delete one Utilizador.
     * @example
     * // Delete one Utilizador
     * const Utilizador = await prisma.utilizador.delete({
     *   where: {
     *     // ... filter to delete one Utilizador
     *   }
     * })
     * 
    **/
    delete<T extends UtilizadorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UtilizadorDeleteArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Utilizador.
     * @param {UtilizadorUpdateArgs} args - Arguments to update one Utilizador.
     * @example
     * // Update one Utilizador
     * const utilizador = await prisma.utilizador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UtilizadorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UtilizadorUpdateArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Utilizadors.
     * @param {UtilizadorDeleteManyArgs} args - Arguments to filter Utilizadors to delete.
     * @example
     * // Delete a few Utilizadors
     * const { count } = await prisma.utilizador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UtilizadorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilizadorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Utilizadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Utilizadors
     * const utilizador = await prisma.utilizador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UtilizadorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UtilizadorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Utilizador.
     * @param {UtilizadorUpsertArgs} args - Arguments to update or create a Utilizador.
     * @example
     * // Update or create a Utilizador
     * const utilizador = await prisma.utilizador.upsert({
     *   create: {
     *     // ... data to create a Utilizador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Utilizador we want to update
     *   }
     * })
    **/
    upsert<T extends UtilizadorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UtilizadorUpsertArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Utilizadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorCountArgs} args - Arguments to filter Utilizadors to count.
     * @example
     * // Count the number of Utilizadors
     * const count = await prisma.utilizador.count({
     *   where: {
     *     // ... the filter for the Utilizadors we want to count
     *   }
     * })
    **/
    count<T extends UtilizadorCountArgs>(
      args?: Subset<T, UtilizadorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UtilizadorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Utilizador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UtilizadorAggregateArgs>(args: Subset<T, UtilizadorAggregateArgs>): Prisma.PrismaPromise<GetUtilizadorAggregateType<T>>

    /**
     * Group by Utilizador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UtilizadorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UtilizadorGroupByArgs['orderBy'] }
        : { orderBy?: UtilizadorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UtilizadorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUtilizadorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Utilizador model
   */
  readonly fields: UtilizadorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Utilizador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UtilizadorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    viaturas<T extends Utilizador$viaturasArgs<ExtArgs> = {}>(args?: Subset<T, Utilizador$viaturasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ViaturaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Utilizador model
   */ 
  interface UtilizadorFieldRefs {
    readonly id: FieldRef<"Utilizador", 'Int'>
    readonly name: FieldRef<"Utilizador", 'String'>
    readonly email: FieldRef<"Utilizador", 'String'>
    readonly password: FieldRef<"Utilizador", 'String'>
    readonly isAdmin: FieldRef<"Utilizador", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Utilizador findUnique
   */
  export type UtilizadorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * Filter, which Utilizador to fetch.
     */
    where: UtilizadorWhereUniqueInput
  }


  /**
   * Utilizador findUniqueOrThrow
   */
  export type UtilizadorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * Filter, which Utilizador to fetch.
     */
    where: UtilizadorWhereUniqueInput
  }


  /**
   * Utilizador findFirst
   */
  export type UtilizadorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * Filter, which Utilizador to fetch.
     */
    where?: UtilizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilizadors to fetch.
     */
    orderBy?: UtilizadorOrderByWithRelationInput | UtilizadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilizadors.
     */
    cursor?: UtilizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilizadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilizadors.
     */
    distinct?: UtilizadorScalarFieldEnum | UtilizadorScalarFieldEnum[]
  }


  /**
   * Utilizador findFirstOrThrow
   */
  export type UtilizadorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * Filter, which Utilizador to fetch.
     */
    where?: UtilizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilizadors to fetch.
     */
    orderBy?: UtilizadorOrderByWithRelationInput | UtilizadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilizadors.
     */
    cursor?: UtilizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilizadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilizadors.
     */
    distinct?: UtilizadorScalarFieldEnum | UtilizadorScalarFieldEnum[]
  }


  /**
   * Utilizador findMany
   */
  export type UtilizadorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * Filter, which Utilizadors to fetch.
     */
    where?: UtilizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilizadors to fetch.
     */
    orderBy?: UtilizadorOrderByWithRelationInput | UtilizadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Utilizadors.
     */
    cursor?: UtilizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilizadors.
     */
    skip?: number
    distinct?: UtilizadorScalarFieldEnum | UtilizadorScalarFieldEnum[]
  }


  /**
   * Utilizador create
   */
  export type UtilizadorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * The data needed to create a Utilizador.
     */
    data: XOR<UtilizadorCreateInput, UtilizadorUncheckedCreateInput>
  }


  /**
   * Utilizador createMany
   */
  export type UtilizadorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Utilizadors.
     */
    data: UtilizadorCreateManyInput | UtilizadorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Utilizador update
   */
  export type UtilizadorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * The data needed to update a Utilizador.
     */
    data: XOR<UtilizadorUpdateInput, UtilizadorUncheckedUpdateInput>
    /**
     * Choose, which Utilizador to update.
     */
    where: UtilizadorWhereUniqueInput
  }


  /**
   * Utilizador updateMany
   */
  export type UtilizadorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Utilizadors.
     */
    data: XOR<UtilizadorUpdateManyMutationInput, UtilizadorUncheckedUpdateManyInput>
    /**
     * Filter which Utilizadors to update
     */
    where?: UtilizadorWhereInput
  }


  /**
   * Utilizador upsert
   */
  export type UtilizadorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * The filter to search for the Utilizador to update in case it exists.
     */
    where: UtilizadorWhereUniqueInput
    /**
     * In case the Utilizador found by the `where` argument doesn't exist, create a new Utilizador with this data.
     */
    create: XOR<UtilizadorCreateInput, UtilizadorUncheckedCreateInput>
    /**
     * In case the Utilizador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UtilizadorUpdateInput, UtilizadorUncheckedUpdateInput>
  }


  /**
   * Utilizador delete
   */
  export type UtilizadorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * Filter which Utilizador to delete.
     */
    where: UtilizadorWhereUniqueInput
  }


  /**
   * Utilizador deleteMany
   */
  export type UtilizadorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilizadors to delete
     */
    where?: UtilizadorWhereInput
  }


  /**
   * Utilizador.viaturas
   */
  export type Utilizador$viaturasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viatura
     */
    select?: ViaturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViaturaInclude<ExtArgs> | null
    where?: ViaturaWhereInput
    orderBy?: ViaturaOrderByWithRelationInput | ViaturaOrderByWithRelationInput[]
    cursor?: ViaturaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ViaturaScalarFieldEnum | ViaturaScalarFieldEnum[]
  }


  /**
   * Utilizador without action
   */
  export type UtilizadorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UtilizadorInclude<ExtArgs> | null
  }



  /**
   * Model Viatura
   */

  export type AggregateViatura = {
    _count: ViaturaCountAggregateOutputType | null
    _avg: ViaturaAvgAggregateOutputType | null
    _sum: ViaturaSumAggregateOutputType | null
    _min: ViaturaMinAggregateOutputType | null
    _max: ViaturaMaxAggregateOutputType | null
  }

  export type ViaturaAvgAggregateOutputType = {
    id: number | null
    ano: number | null
    proprietarioId: number | null
  }

  export type ViaturaSumAggregateOutputType = {
    id: number | null
    ano: number | null
    proprietarioId: number | null
  }

  export type ViaturaMinAggregateOutputType = {
    id: number | null
    modelo: string | null
    ano: number | null
    proprietarioId: number | null
  }

  export type ViaturaMaxAggregateOutputType = {
    id: number | null
    modelo: string | null
    ano: number | null
    proprietarioId: number | null
  }

  export type ViaturaCountAggregateOutputType = {
    id: number
    modelo: number
    ano: number
    proprietarioId: number
    _all: number
  }


  export type ViaturaAvgAggregateInputType = {
    id?: true
    ano?: true
    proprietarioId?: true
  }

  export type ViaturaSumAggregateInputType = {
    id?: true
    ano?: true
    proprietarioId?: true
  }

  export type ViaturaMinAggregateInputType = {
    id?: true
    modelo?: true
    ano?: true
    proprietarioId?: true
  }

  export type ViaturaMaxAggregateInputType = {
    id?: true
    modelo?: true
    ano?: true
    proprietarioId?: true
  }

  export type ViaturaCountAggregateInputType = {
    id?: true
    modelo?: true
    ano?: true
    proprietarioId?: true
    _all?: true
  }

  export type ViaturaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Viatura to aggregate.
     */
    where?: ViaturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Viaturas to fetch.
     */
    orderBy?: ViaturaOrderByWithRelationInput | ViaturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ViaturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Viaturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Viaturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Viaturas
    **/
    _count?: true | ViaturaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ViaturaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ViaturaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ViaturaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ViaturaMaxAggregateInputType
  }

  export type GetViaturaAggregateType<T extends ViaturaAggregateArgs> = {
        [P in keyof T & keyof AggregateViatura]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateViatura[P]>
      : GetScalarType<T[P], AggregateViatura[P]>
  }




  export type ViaturaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ViaturaWhereInput
    orderBy?: ViaturaOrderByWithAggregationInput | ViaturaOrderByWithAggregationInput[]
    by: ViaturaScalarFieldEnum[] | ViaturaScalarFieldEnum
    having?: ViaturaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ViaturaCountAggregateInputType | true
    _avg?: ViaturaAvgAggregateInputType
    _sum?: ViaturaSumAggregateInputType
    _min?: ViaturaMinAggregateInputType
    _max?: ViaturaMaxAggregateInputType
  }

  export type ViaturaGroupByOutputType = {
    id: number
    modelo: string
    ano: number
    proprietarioId: number
    _count: ViaturaCountAggregateOutputType | null
    _avg: ViaturaAvgAggregateOutputType | null
    _sum: ViaturaSumAggregateOutputType | null
    _min: ViaturaMinAggregateOutputType | null
    _max: ViaturaMaxAggregateOutputType | null
  }

  type GetViaturaGroupByPayload<T extends ViaturaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ViaturaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ViaturaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ViaturaGroupByOutputType[P]>
            : GetScalarType<T[P], ViaturaGroupByOutputType[P]>
        }
      >
    >


  export type ViaturaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    modelo?: boolean
    ano?: boolean
    proprietarioId?: boolean
    proprietario?: boolean | UtilizadorDefaultArgs<ExtArgs>
    manutencoes?: boolean | Viatura$manutencoesArgs<ExtArgs>
    Marcacao?: boolean | Viatura$MarcacaoArgs<ExtArgs>
    _count?: boolean | ViaturaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["viatura"]>

  export type ViaturaSelectScalar = {
    id?: boolean
    modelo?: boolean
    ano?: boolean
    proprietarioId?: boolean
  }

  export type ViaturaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proprietario?: boolean | UtilizadorDefaultArgs<ExtArgs>
    manutencoes?: boolean | Viatura$manutencoesArgs<ExtArgs>
    Marcacao?: boolean | Viatura$MarcacaoArgs<ExtArgs>
    _count?: boolean | ViaturaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ViaturaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Viatura"
    objects: {
      proprietario: Prisma.$UtilizadorPayload<ExtArgs>
      manutencoes: Prisma.$ManutencaoPayload<ExtArgs>[]
      Marcacao: Prisma.$MarcacaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      modelo: string
      ano: number
      proprietarioId: number
    }, ExtArgs["result"]["viatura"]>
    composites: {}
  }


  type ViaturaGetPayload<S extends boolean | null | undefined | ViaturaDefaultArgs> = $Result.GetResult<Prisma.$ViaturaPayload, S>

  type ViaturaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ViaturaFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ViaturaCountAggregateInputType | true
    }

  export interface ViaturaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Viatura'], meta: { name: 'Viatura' } }
    /**
     * Find zero or one Viatura that matches the filter.
     * @param {ViaturaFindUniqueArgs} args - Arguments to find a Viatura
     * @example
     * // Get one Viatura
     * const viatura = await prisma.viatura.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ViaturaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ViaturaFindUniqueArgs<ExtArgs>>
    ): Prisma__ViaturaClient<$Result.GetResult<Prisma.$ViaturaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Viatura that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ViaturaFindUniqueOrThrowArgs} args - Arguments to find a Viatura
     * @example
     * // Get one Viatura
     * const viatura = await prisma.viatura.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ViaturaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ViaturaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ViaturaClient<$Result.GetResult<Prisma.$ViaturaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Viatura that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViaturaFindFirstArgs} args - Arguments to find a Viatura
     * @example
     * // Get one Viatura
     * const viatura = await prisma.viatura.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ViaturaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ViaturaFindFirstArgs<ExtArgs>>
    ): Prisma__ViaturaClient<$Result.GetResult<Prisma.$ViaturaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Viatura that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViaturaFindFirstOrThrowArgs} args - Arguments to find a Viatura
     * @example
     * // Get one Viatura
     * const viatura = await prisma.viatura.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ViaturaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ViaturaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ViaturaClient<$Result.GetResult<Prisma.$ViaturaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Viaturas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViaturaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Viaturas
     * const viaturas = await prisma.viatura.findMany()
     * 
     * // Get first 10 Viaturas
     * const viaturas = await prisma.viatura.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const viaturaWithIdOnly = await prisma.viatura.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ViaturaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ViaturaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ViaturaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Viatura.
     * @param {ViaturaCreateArgs} args - Arguments to create a Viatura.
     * @example
     * // Create one Viatura
     * const Viatura = await prisma.viatura.create({
     *   data: {
     *     // ... data to create a Viatura
     *   }
     * })
     * 
    **/
    create<T extends ViaturaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ViaturaCreateArgs<ExtArgs>>
    ): Prisma__ViaturaClient<$Result.GetResult<Prisma.$ViaturaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Viaturas.
     *     @param {ViaturaCreateManyArgs} args - Arguments to create many Viaturas.
     *     @example
     *     // Create many Viaturas
     *     const viatura = await prisma.viatura.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ViaturaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ViaturaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Viatura.
     * @param {ViaturaDeleteArgs} args - Arguments to delete one Viatura.
     * @example
     * // Delete one Viatura
     * const Viatura = await prisma.viatura.delete({
     *   where: {
     *     // ... filter to delete one Viatura
     *   }
     * })
     * 
    **/
    delete<T extends ViaturaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ViaturaDeleteArgs<ExtArgs>>
    ): Prisma__ViaturaClient<$Result.GetResult<Prisma.$ViaturaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Viatura.
     * @param {ViaturaUpdateArgs} args - Arguments to update one Viatura.
     * @example
     * // Update one Viatura
     * const viatura = await prisma.viatura.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ViaturaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ViaturaUpdateArgs<ExtArgs>>
    ): Prisma__ViaturaClient<$Result.GetResult<Prisma.$ViaturaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Viaturas.
     * @param {ViaturaDeleteManyArgs} args - Arguments to filter Viaturas to delete.
     * @example
     * // Delete a few Viaturas
     * const { count } = await prisma.viatura.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ViaturaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ViaturaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Viaturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViaturaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Viaturas
     * const viatura = await prisma.viatura.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ViaturaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ViaturaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Viatura.
     * @param {ViaturaUpsertArgs} args - Arguments to update or create a Viatura.
     * @example
     * // Update or create a Viatura
     * const viatura = await prisma.viatura.upsert({
     *   create: {
     *     // ... data to create a Viatura
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Viatura we want to update
     *   }
     * })
    **/
    upsert<T extends ViaturaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ViaturaUpsertArgs<ExtArgs>>
    ): Prisma__ViaturaClient<$Result.GetResult<Prisma.$ViaturaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Viaturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViaturaCountArgs} args - Arguments to filter Viaturas to count.
     * @example
     * // Count the number of Viaturas
     * const count = await prisma.viatura.count({
     *   where: {
     *     // ... the filter for the Viaturas we want to count
     *   }
     * })
    **/
    count<T extends ViaturaCountArgs>(
      args?: Subset<T, ViaturaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ViaturaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Viatura.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViaturaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ViaturaAggregateArgs>(args: Subset<T, ViaturaAggregateArgs>): Prisma.PrismaPromise<GetViaturaAggregateType<T>>

    /**
     * Group by Viatura.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViaturaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ViaturaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ViaturaGroupByArgs['orderBy'] }
        : { orderBy?: ViaturaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ViaturaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetViaturaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Viatura model
   */
  readonly fields: ViaturaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Viatura.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ViaturaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    proprietario<T extends UtilizadorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilizadorDefaultArgs<ExtArgs>>): Prisma__UtilizadorClient<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    manutencoes<T extends Viatura$manutencoesArgs<ExtArgs> = {}>(args?: Subset<T, Viatura$manutencoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, 'findMany'> | Null>;

    Marcacao<T extends Viatura$MarcacaoArgs<ExtArgs> = {}>(args?: Subset<T, Viatura$MarcacaoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarcacaoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Viatura model
   */ 
  interface ViaturaFieldRefs {
    readonly id: FieldRef<"Viatura", 'Int'>
    readonly modelo: FieldRef<"Viatura", 'String'>
    readonly ano: FieldRef<"Viatura", 'Int'>
    readonly proprietarioId: FieldRef<"Viatura", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Viatura findUnique
   */
  export type ViaturaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viatura
     */
    select?: ViaturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViaturaInclude<ExtArgs> | null
    /**
     * Filter, which Viatura to fetch.
     */
    where: ViaturaWhereUniqueInput
  }


  /**
   * Viatura findUniqueOrThrow
   */
  export type ViaturaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viatura
     */
    select?: ViaturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViaturaInclude<ExtArgs> | null
    /**
     * Filter, which Viatura to fetch.
     */
    where: ViaturaWhereUniqueInput
  }


  /**
   * Viatura findFirst
   */
  export type ViaturaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viatura
     */
    select?: ViaturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViaturaInclude<ExtArgs> | null
    /**
     * Filter, which Viatura to fetch.
     */
    where?: ViaturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Viaturas to fetch.
     */
    orderBy?: ViaturaOrderByWithRelationInput | ViaturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Viaturas.
     */
    cursor?: ViaturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Viaturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Viaturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Viaturas.
     */
    distinct?: ViaturaScalarFieldEnum | ViaturaScalarFieldEnum[]
  }


  /**
   * Viatura findFirstOrThrow
   */
  export type ViaturaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viatura
     */
    select?: ViaturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViaturaInclude<ExtArgs> | null
    /**
     * Filter, which Viatura to fetch.
     */
    where?: ViaturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Viaturas to fetch.
     */
    orderBy?: ViaturaOrderByWithRelationInput | ViaturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Viaturas.
     */
    cursor?: ViaturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Viaturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Viaturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Viaturas.
     */
    distinct?: ViaturaScalarFieldEnum | ViaturaScalarFieldEnum[]
  }


  /**
   * Viatura findMany
   */
  export type ViaturaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viatura
     */
    select?: ViaturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViaturaInclude<ExtArgs> | null
    /**
     * Filter, which Viaturas to fetch.
     */
    where?: ViaturaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Viaturas to fetch.
     */
    orderBy?: ViaturaOrderByWithRelationInput | ViaturaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Viaturas.
     */
    cursor?: ViaturaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Viaturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Viaturas.
     */
    skip?: number
    distinct?: ViaturaScalarFieldEnum | ViaturaScalarFieldEnum[]
  }


  /**
   * Viatura create
   */
  export type ViaturaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viatura
     */
    select?: ViaturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViaturaInclude<ExtArgs> | null
    /**
     * The data needed to create a Viatura.
     */
    data: XOR<ViaturaCreateInput, ViaturaUncheckedCreateInput>
  }


  /**
   * Viatura createMany
   */
  export type ViaturaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Viaturas.
     */
    data: ViaturaCreateManyInput | ViaturaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Viatura update
   */
  export type ViaturaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viatura
     */
    select?: ViaturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViaturaInclude<ExtArgs> | null
    /**
     * The data needed to update a Viatura.
     */
    data: XOR<ViaturaUpdateInput, ViaturaUncheckedUpdateInput>
    /**
     * Choose, which Viatura to update.
     */
    where: ViaturaWhereUniqueInput
  }


  /**
   * Viatura updateMany
   */
  export type ViaturaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Viaturas.
     */
    data: XOR<ViaturaUpdateManyMutationInput, ViaturaUncheckedUpdateManyInput>
    /**
     * Filter which Viaturas to update
     */
    where?: ViaturaWhereInput
  }


  /**
   * Viatura upsert
   */
  export type ViaturaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viatura
     */
    select?: ViaturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViaturaInclude<ExtArgs> | null
    /**
     * The filter to search for the Viatura to update in case it exists.
     */
    where: ViaturaWhereUniqueInput
    /**
     * In case the Viatura found by the `where` argument doesn't exist, create a new Viatura with this data.
     */
    create: XOR<ViaturaCreateInput, ViaturaUncheckedCreateInput>
    /**
     * In case the Viatura was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ViaturaUpdateInput, ViaturaUncheckedUpdateInput>
  }


  /**
   * Viatura delete
   */
  export type ViaturaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viatura
     */
    select?: ViaturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViaturaInclude<ExtArgs> | null
    /**
     * Filter which Viatura to delete.
     */
    where: ViaturaWhereUniqueInput
  }


  /**
   * Viatura deleteMany
   */
  export type ViaturaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Viaturas to delete
     */
    where?: ViaturaWhereInput
  }


  /**
   * Viatura.manutencoes
   */
  export type Viatura$manutencoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManutencaoInclude<ExtArgs> | null
    where?: ManutencaoWhereInput
    orderBy?: ManutencaoOrderByWithRelationInput | ManutencaoOrderByWithRelationInput[]
    cursor?: ManutencaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ManutencaoScalarFieldEnum | ManutencaoScalarFieldEnum[]
  }


  /**
   * Viatura.Marcacao
   */
  export type Viatura$MarcacaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marcacao
     */
    select?: MarcacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MarcacaoInclude<ExtArgs> | null
    where?: MarcacaoWhereInput
    orderBy?: MarcacaoOrderByWithRelationInput | MarcacaoOrderByWithRelationInput[]
    cursor?: MarcacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MarcacaoScalarFieldEnum | MarcacaoScalarFieldEnum[]
  }


  /**
   * Viatura without action
   */
  export type ViaturaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viatura
     */
    select?: ViaturaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViaturaInclude<ExtArgs> | null
  }



  /**
   * Model Manutencao
   */

  export type AggregateManutencao = {
    _count: ManutencaoCountAggregateOutputType | null
    _avg: ManutencaoAvgAggregateOutputType | null
    _sum: ManutencaoSumAggregateOutputType | null
    _min: ManutencaoMinAggregateOutputType | null
    _max: ManutencaoMaxAggregateOutputType | null
  }

  export type ManutencaoAvgAggregateOutputType = {
    id: number | null
    custo: number | null
    viaturaId: number | null
    categoriaId: number | null
  }

  export type ManutencaoSumAggregateOutputType = {
    id: number | null
    custo: number | null
    viaturaId: number | null
    categoriaId: number | null
  }

  export type ManutencaoMinAggregateOutputType = {
    id: number | null
    descricao: string | null
    data: Date | null
    custo: number | null
    viaturaId: number | null
    categoriaId: number | null
  }

  export type ManutencaoMaxAggregateOutputType = {
    id: number | null
    descricao: string | null
    data: Date | null
    custo: number | null
    viaturaId: number | null
    categoriaId: number | null
  }

  export type ManutencaoCountAggregateOutputType = {
    id: number
    descricao: number
    data: number
    custo: number
    viaturaId: number
    categoriaId: number
    _all: number
  }


  export type ManutencaoAvgAggregateInputType = {
    id?: true
    custo?: true
    viaturaId?: true
    categoriaId?: true
  }

  export type ManutencaoSumAggregateInputType = {
    id?: true
    custo?: true
    viaturaId?: true
    categoriaId?: true
  }

  export type ManutencaoMinAggregateInputType = {
    id?: true
    descricao?: true
    data?: true
    custo?: true
    viaturaId?: true
    categoriaId?: true
  }

  export type ManutencaoMaxAggregateInputType = {
    id?: true
    descricao?: true
    data?: true
    custo?: true
    viaturaId?: true
    categoriaId?: true
  }

  export type ManutencaoCountAggregateInputType = {
    id?: true
    descricao?: true
    data?: true
    custo?: true
    viaturaId?: true
    categoriaId?: true
    _all?: true
  }

  export type ManutencaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Manutencao to aggregate.
     */
    where?: ManutencaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manutencaos to fetch.
     */
    orderBy?: ManutencaoOrderByWithRelationInput | ManutencaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ManutencaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manutencaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manutencaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Manutencaos
    **/
    _count?: true | ManutencaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ManutencaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ManutencaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ManutencaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ManutencaoMaxAggregateInputType
  }

  export type GetManutencaoAggregateType<T extends ManutencaoAggregateArgs> = {
        [P in keyof T & keyof AggregateManutencao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateManutencao[P]>
      : GetScalarType<T[P], AggregateManutencao[P]>
  }




  export type ManutencaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManutencaoWhereInput
    orderBy?: ManutencaoOrderByWithAggregationInput | ManutencaoOrderByWithAggregationInput[]
    by: ManutencaoScalarFieldEnum[] | ManutencaoScalarFieldEnum
    having?: ManutencaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ManutencaoCountAggregateInputType | true
    _avg?: ManutencaoAvgAggregateInputType
    _sum?: ManutencaoSumAggregateInputType
    _min?: ManutencaoMinAggregateInputType
    _max?: ManutencaoMaxAggregateInputType
  }

  export type ManutencaoGroupByOutputType = {
    id: number
    descricao: string
    data: Date
    custo: number
    viaturaId: number
    categoriaId: number
    _count: ManutencaoCountAggregateOutputType | null
    _avg: ManutencaoAvgAggregateOutputType | null
    _sum: ManutencaoSumAggregateOutputType | null
    _min: ManutencaoMinAggregateOutputType | null
    _max: ManutencaoMaxAggregateOutputType | null
  }

  type GetManutencaoGroupByPayload<T extends ManutencaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ManutencaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ManutencaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ManutencaoGroupByOutputType[P]>
            : GetScalarType<T[P], ManutencaoGroupByOutputType[P]>
        }
      >
    >


  export type ManutencaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    data?: boolean
    custo?: boolean
    viaturaId?: boolean
    categoriaId?: boolean
    viatura?: boolean | ViaturaDefaultArgs<ExtArgs>
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["manutencao"]>

  export type ManutencaoSelectScalar = {
    id?: boolean
    descricao?: boolean
    data?: boolean
    custo?: boolean
    viaturaId?: boolean
    categoriaId?: boolean
  }

  export type ManutencaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    viatura?: boolean | ViaturaDefaultArgs<ExtArgs>
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
  }


  export type $ManutencaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Manutencao"
    objects: {
      viatura: Prisma.$ViaturaPayload<ExtArgs>
      categoria: Prisma.$CategoriaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      descricao: string
      data: Date
      custo: number
      viaturaId: number
      categoriaId: number
    }, ExtArgs["result"]["manutencao"]>
    composites: {}
  }


  type ManutencaoGetPayload<S extends boolean | null | undefined | ManutencaoDefaultArgs> = $Result.GetResult<Prisma.$ManutencaoPayload, S>

  type ManutencaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ManutencaoFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ManutencaoCountAggregateInputType | true
    }

  export interface ManutencaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Manutencao'], meta: { name: 'Manutencao' } }
    /**
     * Find zero or one Manutencao that matches the filter.
     * @param {ManutencaoFindUniqueArgs} args - Arguments to find a Manutencao
     * @example
     * // Get one Manutencao
     * const manutencao = await prisma.manutencao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ManutencaoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ManutencaoFindUniqueArgs<ExtArgs>>
    ): Prisma__ManutencaoClient<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Manutencao that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ManutencaoFindUniqueOrThrowArgs} args - Arguments to find a Manutencao
     * @example
     * // Get one Manutencao
     * const manutencao = await prisma.manutencao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ManutencaoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ManutencaoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ManutencaoClient<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Manutencao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManutencaoFindFirstArgs} args - Arguments to find a Manutencao
     * @example
     * // Get one Manutencao
     * const manutencao = await prisma.manutencao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ManutencaoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ManutencaoFindFirstArgs<ExtArgs>>
    ): Prisma__ManutencaoClient<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Manutencao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManutencaoFindFirstOrThrowArgs} args - Arguments to find a Manutencao
     * @example
     * // Get one Manutencao
     * const manutencao = await prisma.manutencao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ManutencaoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ManutencaoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ManutencaoClient<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Manutencaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManutencaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Manutencaos
     * const manutencaos = await prisma.manutencao.findMany()
     * 
     * // Get first 10 Manutencaos
     * const manutencaos = await prisma.manutencao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const manutencaoWithIdOnly = await prisma.manutencao.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ManutencaoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ManutencaoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Manutencao.
     * @param {ManutencaoCreateArgs} args - Arguments to create a Manutencao.
     * @example
     * // Create one Manutencao
     * const Manutencao = await prisma.manutencao.create({
     *   data: {
     *     // ... data to create a Manutencao
     *   }
     * })
     * 
    **/
    create<T extends ManutencaoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ManutencaoCreateArgs<ExtArgs>>
    ): Prisma__ManutencaoClient<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Manutencaos.
     *     @param {ManutencaoCreateManyArgs} args - Arguments to create many Manutencaos.
     *     @example
     *     // Create many Manutencaos
     *     const manutencao = await prisma.manutencao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ManutencaoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ManutencaoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Manutencao.
     * @param {ManutencaoDeleteArgs} args - Arguments to delete one Manutencao.
     * @example
     * // Delete one Manutencao
     * const Manutencao = await prisma.manutencao.delete({
     *   where: {
     *     // ... filter to delete one Manutencao
     *   }
     * })
     * 
    **/
    delete<T extends ManutencaoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ManutencaoDeleteArgs<ExtArgs>>
    ): Prisma__ManutencaoClient<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Manutencao.
     * @param {ManutencaoUpdateArgs} args - Arguments to update one Manutencao.
     * @example
     * // Update one Manutencao
     * const manutencao = await prisma.manutencao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ManutencaoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ManutencaoUpdateArgs<ExtArgs>>
    ): Prisma__ManutencaoClient<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Manutencaos.
     * @param {ManutencaoDeleteManyArgs} args - Arguments to filter Manutencaos to delete.
     * @example
     * // Delete a few Manutencaos
     * const { count } = await prisma.manutencao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ManutencaoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ManutencaoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Manutencaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManutencaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Manutencaos
     * const manutencao = await prisma.manutencao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ManutencaoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ManutencaoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Manutencao.
     * @param {ManutencaoUpsertArgs} args - Arguments to update or create a Manutencao.
     * @example
     * // Update or create a Manutencao
     * const manutencao = await prisma.manutencao.upsert({
     *   create: {
     *     // ... data to create a Manutencao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Manutencao we want to update
     *   }
     * })
    **/
    upsert<T extends ManutencaoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ManutencaoUpsertArgs<ExtArgs>>
    ): Prisma__ManutencaoClient<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Manutencaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManutencaoCountArgs} args - Arguments to filter Manutencaos to count.
     * @example
     * // Count the number of Manutencaos
     * const count = await prisma.manutencao.count({
     *   where: {
     *     // ... the filter for the Manutencaos we want to count
     *   }
     * })
    **/
    count<T extends ManutencaoCountArgs>(
      args?: Subset<T, ManutencaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ManutencaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Manutencao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManutencaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ManutencaoAggregateArgs>(args: Subset<T, ManutencaoAggregateArgs>): Prisma.PrismaPromise<GetManutencaoAggregateType<T>>

    /**
     * Group by Manutencao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManutencaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ManutencaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ManutencaoGroupByArgs['orderBy'] }
        : { orderBy?: ManutencaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ManutencaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetManutencaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Manutencao model
   */
  readonly fields: ManutencaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Manutencao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ManutencaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    viatura<T extends ViaturaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ViaturaDefaultArgs<ExtArgs>>): Prisma__ViaturaClient<$Result.GetResult<Prisma.$ViaturaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    categoria<T extends CategoriaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoriaDefaultArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Manutencao model
   */ 
  interface ManutencaoFieldRefs {
    readonly id: FieldRef<"Manutencao", 'Int'>
    readonly descricao: FieldRef<"Manutencao", 'String'>
    readonly data: FieldRef<"Manutencao", 'DateTime'>
    readonly custo: FieldRef<"Manutencao", 'Float'>
    readonly viaturaId: FieldRef<"Manutencao", 'Int'>
    readonly categoriaId: FieldRef<"Manutencao", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Manutencao findUnique
   */
  export type ManutencaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManutencaoInclude<ExtArgs> | null
    /**
     * Filter, which Manutencao to fetch.
     */
    where: ManutencaoWhereUniqueInput
  }


  /**
   * Manutencao findUniqueOrThrow
   */
  export type ManutencaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManutencaoInclude<ExtArgs> | null
    /**
     * Filter, which Manutencao to fetch.
     */
    where: ManutencaoWhereUniqueInput
  }


  /**
   * Manutencao findFirst
   */
  export type ManutencaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManutencaoInclude<ExtArgs> | null
    /**
     * Filter, which Manutencao to fetch.
     */
    where?: ManutencaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manutencaos to fetch.
     */
    orderBy?: ManutencaoOrderByWithRelationInput | ManutencaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Manutencaos.
     */
    cursor?: ManutencaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manutencaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manutencaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Manutencaos.
     */
    distinct?: ManutencaoScalarFieldEnum | ManutencaoScalarFieldEnum[]
  }


  /**
   * Manutencao findFirstOrThrow
   */
  export type ManutencaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManutencaoInclude<ExtArgs> | null
    /**
     * Filter, which Manutencao to fetch.
     */
    where?: ManutencaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manutencaos to fetch.
     */
    orderBy?: ManutencaoOrderByWithRelationInput | ManutencaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Manutencaos.
     */
    cursor?: ManutencaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manutencaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manutencaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Manutencaos.
     */
    distinct?: ManutencaoScalarFieldEnum | ManutencaoScalarFieldEnum[]
  }


  /**
   * Manutencao findMany
   */
  export type ManutencaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManutencaoInclude<ExtArgs> | null
    /**
     * Filter, which Manutencaos to fetch.
     */
    where?: ManutencaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manutencaos to fetch.
     */
    orderBy?: ManutencaoOrderByWithRelationInput | ManutencaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Manutencaos.
     */
    cursor?: ManutencaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manutencaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manutencaos.
     */
    skip?: number
    distinct?: ManutencaoScalarFieldEnum | ManutencaoScalarFieldEnum[]
  }


  /**
   * Manutencao create
   */
  export type ManutencaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManutencaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Manutencao.
     */
    data: XOR<ManutencaoCreateInput, ManutencaoUncheckedCreateInput>
  }


  /**
   * Manutencao createMany
   */
  export type ManutencaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Manutencaos.
     */
    data: ManutencaoCreateManyInput | ManutencaoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Manutencao update
   */
  export type ManutencaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManutencaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Manutencao.
     */
    data: XOR<ManutencaoUpdateInput, ManutencaoUncheckedUpdateInput>
    /**
     * Choose, which Manutencao to update.
     */
    where: ManutencaoWhereUniqueInput
  }


  /**
   * Manutencao updateMany
   */
  export type ManutencaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Manutencaos.
     */
    data: XOR<ManutencaoUpdateManyMutationInput, ManutencaoUncheckedUpdateManyInput>
    /**
     * Filter which Manutencaos to update
     */
    where?: ManutencaoWhereInput
  }


  /**
   * Manutencao upsert
   */
  export type ManutencaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManutencaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Manutencao to update in case it exists.
     */
    where: ManutencaoWhereUniqueInput
    /**
     * In case the Manutencao found by the `where` argument doesn't exist, create a new Manutencao with this data.
     */
    create: XOR<ManutencaoCreateInput, ManutencaoUncheckedCreateInput>
    /**
     * In case the Manutencao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ManutencaoUpdateInput, ManutencaoUncheckedUpdateInput>
  }


  /**
   * Manutencao delete
   */
  export type ManutencaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManutencaoInclude<ExtArgs> | null
    /**
     * Filter which Manutencao to delete.
     */
    where: ManutencaoWhereUniqueInput
  }


  /**
   * Manutencao deleteMany
   */
  export type ManutencaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Manutencaos to delete
     */
    where?: ManutencaoWhereInput
  }


  /**
   * Manutencao without action
   */
  export type ManutencaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManutencaoInclude<ExtArgs> | null
  }



  /**
   * Model Categoria
   */

  export type AggregateCategoria = {
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  export type CategoriaAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriaSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriaMinAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type CategoriaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type CategoriaCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type CategoriaAvgAggregateInputType = {
    id?: true
  }

  export type CategoriaSumAggregateInputType = {
    id?: true
  }

  export type CategoriaMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type CategoriaMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type CategoriaCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type CategoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categoria to aggregate.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categorias
    **/
    _count?: true | CategoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaMaxAggregateInputType
  }

  export type GetCategoriaAggregateType<T extends CategoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoria[P]>
      : GetScalarType<T[P], AggregateCategoria[P]>
  }




  export type CategoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriaWhereInput
    orderBy?: CategoriaOrderByWithAggregationInput | CategoriaOrderByWithAggregationInput[]
    by: CategoriaScalarFieldEnum[] | CategoriaScalarFieldEnum
    having?: CategoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaCountAggregateInputType | true
    _avg?: CategoriaAvgAggregateInputType
    _sum?: CategoriaSumAggregateInputType
    _min?: CategoriaMinAggregateInputType
    _max?: CategoriaMaxAggregateInputType
  }

  export type CategoriaGroupByOutputType = {
    id: number
    nome: string
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  type GetCategoriaGroupByPayload<T extends CategoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
        }
      >
    >


  export type CategoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    manutencoes?: boolean | Categoria$manutencoesArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoria"]>

  export type CategoriaSelectScalar = {
    id?: boolean
    nome?: boolean
  }

  export type CategoriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manutencoes?: boolean | Categoria$manutencoesArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CategoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categoria"
    objects: {
      manutencoes: Prisma.$ManutencaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
    }, ExtArgs["result"]["categoria"]>
    composites: {}
  }


  type CategoriaGetPayload<S extends boolean | null | undefined | CategoriaDefaultArgs> = $Result.GetResult<Prisma.$CategoriaPayload, S>

  type CategoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoriaFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CategoriaCountAggregateInputType | true
    }

  export interface CategoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categoria'], meta: { name: 'Categoria' } }
    /**
     * Find zero or one Categoria that matches the filter.
     * @param {CategoriaFindUniqueArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoriaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Categoria that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoriaFindUniqueOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoriaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Categoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoriaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaFindFirstArgs<ExtArgs>>
    ): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Categoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoriaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categoria.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categoria.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriaWithIdOnly = await prisma.categoria.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoriaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Categoria.
     * @param {CategoriaCreateArgs} args - Arguments to create a Categoria.
     * @example
     * // Create one Categoria
     * const Categoria = await prisma.categoria.create({
     *   data: {
     *     // ... data to create a Categoria
     *   }
     * })
     * 
    **/
    create<T extends CategoriaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaCreateArgs<ExtArgs>>
    ): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categorias.
     *     @param {CategoriaCreateManyArgs} args - Arguments to create many Categorias.
     *     @example
     *     // Create many Categorias
     *     const categoria = await prisma.categoria.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoriaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categoria.
     * @param {CategoriaDeleteArgs} args - Arguments to delete one Categoria.
     * @example
     * // Delete one Categoria
     * const Categoria = await prisma.categoria.delete({
     *   where: {
     *     // ... filter to delete one Categoria
     *   }
     * })
     * 
    **/
    delete<T extends CategoriaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaDeleteArgs<ExtArgs>>
    ): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Categoria.
     * @param {CategoriaUpdateArgs} args - Arguments to update one Categoria.
     * @example
     * // Update one Categoria
     * const categoria = await prisma.categoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoriaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaUpdateArgs<ExtArgs>>
    ): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categorias.
     * @param {CategoriaDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoriaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categoria = await prisma.categoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoriaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categoria.
     * @param {CategoriaUpsertArgs} args - Arguments to update or create a Categoria.
     * @example
     * // Update or create a Categoria
     * const categoria = await prisma.categoria.upsert({
     *   create: {
     *     // ... data to create a Categoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categoria we want to update
     *   }
     * })
    **/
    upsert<T extends CategoriaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaUpsertArgs<ExtArgs>>
    ): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categoria.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends CategoriaCountArgs>(
      args?: Subset<T, CategoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaAggregateArgs>(args: Subset<T, CategoriaAggregateArgs>): Prisma.PrismaPromise<GetCategoriaAggregateType<T>>

    /**
     * Group by Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriaGroupByArgs['orderBy'] }
        : { orderBy?: CategoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categoria model
   */
  readonly fields: CategoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    manutencoes<T extends Categoria$manutencoesArgs<ExtArgs> = {}>(args?: Subset<T, Categoria$manutencoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManutencaoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Categoria model
   */ 
  interface CategoriaFieldRefs {
    readonly id: FieldRef<"Categoria", 'Int'>
    readonly nome: FieldRef<"Categoria", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Categoria findUnique
   */
  export type CategoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
  }


  /**
   * Categoria findUniqueOrThrow
   */
  export type CategoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
  }


  /**
   * Categoria findFirst
   */
  export type CategoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * Categoria findFirstOrThrow
   */
  export type CategoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * Categoria findMany
   */
  export type CategoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }


  /**
   * Categoria create
   */
  export type CategoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a Categoria.
     */
    data: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
  }


  /**
   * Categoria createMany
   */
  export type CategoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categorias.
     */
    data: CategoriaCreateManyInput | CategoriaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Categoria update
   */
  export type CategoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a Categoria.
     */
    data: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
    /**
     * Choose, which Categoria to update.
     */
    where: CategoriaWhereUniqueInput
  }


  /**
   * Categoria updateMany
   */
  export type CategoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categorias.
     */
    data: XOR<CategoriaUpdateManyMutationInput, CategoriaUncheckedUpdateManyInput>
    /**
     * Filter which Categorias to update
     */
    where?: CategoriaWhereInput
  }


  /**
   * Categoria upsert
   */
  export type CategoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the Categoria to update in case it exists.
     */
    where: CategoriaWhereUniqueInput
    /**
     * In case the Categoria found by the `where` argument doesn't exist, create a new Categoria with this data.
     */
    create: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
    /**
     * In case the Categoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
  }


  /**
   * Categoria delete
   */
  export type CategoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter which Categoria to delete.
     */
    where: CategoriaWhereUniqueInput
  }


  /**
   * Categoria deleteMany
   */
  export type CategoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorias to delete
     */
    where?: CategoriaWhereInput
  }


  /**
   * Categoria.manutencoes
   */
  export type Categoria$manutencoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manutencao
     */
    select?: ManutencaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManutencaoInclude<ExtArgs> | null
    where?: ManutencaoWhereInput
    orderBy?: ManutencaoOrderByWithRelationInput | ManutencaoOrderByWithRelationInput[]
    cursor?: ManutencaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ManutencaoScalarFieldEnum | ManutencaoScalarFieldEnum[]
  }


  /**
   * Categoria without action
   */
  export type CategoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriaInclude<ExtArgs> | null
  }



  /**
   * Model Marcacao
   */

  export type AggregateMarcacao = {
    _count: MarcacaoCountAggregateOutputType | null
    _avg: MarcacaoAvgAggregateOutputType | null
    _sum: MarcacaoSumAggregateOutputType | null
    _min: MarcacaoMinAggregateOutputType | null
    _max: MarcacaoMaxAggregateOutputType | null
  }

  export type MarcacaoAvgAggregateOutputType = {
    id: number | null
    viaturaId: number | null
  }

  export type MarcacaoSumAggregateOutputType = {
    id: number | null
    viaturaId: number | null
  }

  export type MarcacaoMinAggregateOutputType = {
    id: number | null
    data: Date | null
    descricao: string | null
    viaturaId: number | null
  }

  export type MarcacaoMaxAggregateOutputType = {
    id: number | null
    data: Date | null
    descricao: string | null
    viaturaId: number | null
  }

  export type MarcacaoCountAggregateOutputType = {
    id: number
    data: number
    descricao: number
    viaturaId: number
    _all: number
  }


  export type MarcacaoAvgAggregateInputType = {
    id?: true
    viaturaId?: true
  }

  export type MarcacaoSumAggregateInputType = {
    id?: true
    viaturaId?: true
  }

  export type MarcacaoMinAggregateInputType = {
    id?: true
    data?: true
    descricao?: true
    viaturaId?: true
  }

  export type MarcacaoMaxAggregateInputType = {
    id?: true
    data?: true
    descricao?: true
    viaturaId?: true
  }

  export type MarcacaoCountAggregateInputType = {
    id?: true
    data?: true
    descricao?: true
    viaturaId?: true
    _all?: true
  }

  export type MarcacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Marcacao to aggregate.
     */
    where?: MarcacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Marcacaos to fetch.
     */
    orderBy?: MarcacaoOrderByWithRelationInput | MarcacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MarcacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Marcacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Marcacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Marcacaos
    **/
    _count?: true | MarcacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarcacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarcacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarcacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarcacaoMaxAggregateInputType
  }

  export type GetMarcacaoAggregateType<T extends MarcacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateMarcacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarcacao[P]>
      : GetScalarType<T[P], AggregateMarcacao[P]>
  }




  export type MarcacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarcacaoWhereInput
    orderBy?: MarcacaoOrderByWithAggregationInput | MarcacaoOrderByWithAggregationInput[]
    by: MarcacaoScalarFieldEnum[] | MarcacaoScalarFieldEnum
    having?: MarcacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarcacaoCountAggregateInputType | true
    _avg?: MarcacaoAvgAggregateInputType
    _sum?: MarcacaoSumAggregateInputType
    _min?: MarcacaoMinAggregateInputType
    _max?: MarcacaoMaxAggregateInputType
  }

  export type MarcacaoGroupByOutputType = {
    id: number
    data: Date
    descricao: string
    viaturaId: number
    _count: MarcacaoCountAggregateOutputType | null
    _avg: MarcacaoAvgAggregateOutputType | null
    _sum: MarcacaoSumAggregateOutputType | null
    _min: MarcacaoMinAggregateOutputType | null
    _max: MarcacaoMaxAggregateOutputType | null
  }

  type GetMarcacaoGroupByPayload<T extends MarcacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MarcacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarcacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarcacaoGroupByOutputType[P]>
            : GetScalarType<T[P], MarcacaoGroupByOutputType[P]>
        }
      >
    >


  export type MarcacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    data?: boolean
    descricao?: boolean
    viaturaId?: boolean
    viatura?: boolean | ViaturaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marcacao"]>

  export type MarcacaoSelectScalar = {
    id?: boolean
    data?: boolean
    descricao?: boolean
    viaturaId?: boolean
  }

  export type MarcacaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    viatura?: boolean | ViaturaDefaultArgs<ExtArgs>
  }


  export type $MarcacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Marcacao"
    objects: {
      viatura: Prisma.$ViaturaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      data: Date
      descricao: string
      viaturaId: number
    }, ExtArgs["result"]["marcacao"]>
    composites: {}
  }


  type MarcacaoGetPayload<S extends boolean | null | undefined | MarcacaoDefaultArgs> = $Result.GetResult<Prisma.$MarcacaoPayload, S>

  type MarcacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MarcacaoFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: MarcacaoCountAggregateInputType | true
    }

  export interface MarcacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Marcacao'], meta: { name: 'Marcacao' } }
    /**
     * Find zero or one Marcacao that matches the filter.
     * @param {MarcacaoFindUniqueArgs} args - Arguments to find a Marcacao
     * @example
     * // Get one Marcacao
     * const marcacao = await prisma.marcacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MarcacaoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MarcacaoFindUniqueArgs<ExtArgs>>
    ): Prisma__MarcacaoClient<$Result.GetResult<Prisma.$MarcacaoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Marcacao that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MarcacaoFindUniqueOrThrowArgs} args - Arguments to find a Marcacao
     * @example
     * // Get one Marcacao
     * const marcacao = await prisma.marcacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MarcacaoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MarcacaoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MarcacaoClient<$Result.GetResult<Prisma.$MarcacaoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Marcacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcacaoFindFirstArgs} args - Arguments to find a Marcacao
     * @example
     * // Get one Marcacao
     * const marcacao = await prisma.marcacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MarcacaoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MarcacaoFindFirstArgs<ExtArgs>>
    ): Prisma__MarcacaoClient<$Result.GetResult<Prisma.$MarcacaoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Marcacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcacaoFindFirstOrThrowArgs} args - Arguments to find a Marcacao
     * @example
     * // Get one Marcacao
     * const marcacao = await prisma.marcacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MarcacaoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MarcacaoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MarcacaoClient<$Result.GetResult<Prisma.$MarcacaoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Marcacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcacaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Marcacaos
     * const marcacaos = await prisma.marcacao.findMany()
     * 
     * // Get first 10 Marcacaos
     * const marcacaos = await prisma.marcacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marcacaoWithIdOnly = await prisma.marcacao.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MarcacaoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MarcacaoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarcacaoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Marcacao.
     * @param {MarcacaoCreateArgs} args - Arguments to create a Marcacao.
     * @example
     * // Create one Marcacao
     * const Marcacao = await prisma.marcacao.create({
     *   data: {
     *     // ... data to create a Marcacao
     *   }
     * })
     * 
    **/
    create<T extends MarcacaoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MarcacaoCreateArgs<ExtArgs>>
    ): Prisma__MarcacaoClient<$Result.GetResult<Prisma.$MarcacaoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Marcacaos.
     *     @param {MarcacaoCreateManyArgs} args - Arguments to create many Marcacaos.
     *     @example
     *     // Create many Marcacaos
     *     const marcacao = await prisma.marcacao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MarcacaoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MarcacaoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Marcacao.
     * @param {MarcacaoDeleteArgs} args - Arguments to delete one Marcacao.
     * @example
     * // Delete one Marcacao
     * const Marcacao = await prisma.marcacao.delete({
     *   where: {
     *     // ... filter to delete one Marcacao
     *   }
     * })
     * 
    **/
    delete<T extends MarcacaoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MarcacaoDeleteArgs<ExtArgs>>
    ): Prisma__MarcacaoClient<$Result.GetResult<Prisma.$MarcacaoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Marcacao.
     * @param {MarcacaoUpdateArgs} args - Arguments to update one Marcacao.
     * @example
     * // Update one Marcacao
     * const marcacao = await prisma.marcacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MarcacaoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MarcacaoUpdateArgs<ExtArgs>>
    ): Prisma__MarcacaoClient<$Result.GetResult<Prisma.$MarcacaoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Marcacaos.
     * @param {MarcacaoDeleteManyArgs} args - Arguments to filter Marcacaos to delete.
     * @example
     * // Delete a few Marcacaos
     * const { count } = await prisma.marcacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MarcacaoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MarcacaoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Marcacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Marcacaos
     * const marcacao = await prisma.marcacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MarcacaoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MarcacaoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Marcacao.
     * @param {MarcacaoUpsertArgs} args - Arguments to update or create a Marcacao.
     * @example
     * // Update or create a Marcacao
     * const marcacao = await prisma.marcacao.upsert({
     *   create: {
     *     // ... data to create a Marcacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Marcacao we want to update
     *   }
     * })
    **/
    upsert<T extends MarcacaoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MarcacaoUpsertArgs<ExtArgs>>
    ): Prisma__MarcacaoClient<$Result.GetResult<Prisma.$MarcacaoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Marcacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcacaoCountArgs} args - Arguments to filter Marcacaos to count.
     * @example
     * // Count the number of Marcacaos
     * const count = await prisma.marcacao.count({
     *   where: {
     *     // ... the filter for the Marcacaos we want to count
     *   }
     * })
    **/
    count<T extends MarcacaoCountArgs>(
      args?: Subset<T, MarcacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarcacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Marcacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarcacaoAggregateArgs>(args: Subset<T, MarcacaoAggregateArgs>): Prisma.PrismaPromise<GetMarcacaoAggregateType<T>>

    /**
     * Group by Marcacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MarcacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MarcacaoGroupByArgs['orderBy'] }
        : { orderBy?: MarcacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MarcacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarcacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Marcacao model
   */
  readonly fields: MarcacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Marcacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MarcacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    viatura<T extends ViaturaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ViaturaDefaultArgs<ExtArgs>>): Prisma__ViaturaClient<$Result.GetResult<Prisma.$ViaturaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Marcacao model
   */ 
  interface MarcacaoFieldRefs {
    readonly id: FieldRef<"Marcacao", 'Int'>
    readonly data: FieldRef<"Marcacao", 'DateTime'>
    readonly descricao: FieldRef<"Marcacao", 'String'>
    readonly viaturaId: FieldRef<"Marcacao", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Marcacao findUnique
   */
  export type MarcacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marcacao
     */
    select?: MarcacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MarcacaoInclude<ExtArgs> | null
    /**
     * Filter, which Marcacao to fetch.
     */
    where: MarcacaoWhereUniqueInput
  }


  /**
   * Marcacao findUniqueOrThrow
   */
  export type MarcacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marcacao
     */
    select?: MarcacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MarcacaoInclude<ExtArgs> | null
    /**
     * Filter, which Marcacao to fetch.
     */
    where: MarcacaoWhereUniqueInput
  }


  /**
   * Marcacao findFirst
   */
  export type MarcacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marcacao
     */
    select?: MarcacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MarcacaoInclude<ExtArgs> | null
    /**
     * Filter, which Marcacao to fetch.
     */
    where?: MarcacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Marcacaos to fetch.
     */
    orderBy?: MarcacaoOrderByWithRelationInput | MarcacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Marcacaos.
     */
    cursor?: MarcacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Marcacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Marcacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Marcacaos.
     */
    distinct?: MarcacaoScalarFieldEnum | MarcacaoScalarFieldEnum[]
  }


  /**
   * Marcacao findFirstOrThrow
   */
  export type MarcacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marcacao
     */
    select?: MarcacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MarcacaoInclude<ExtArgs> | null
    /**
     * Filter, which Marcacao to fetch.
     */
    where?: MarcacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Marcacaos to fetch.
     */
    orderBy?: MarcacaoOrderByWithRelationInput | MarcacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Marcacaos.
     */
    cursor?: MarcacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Marcacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Marcacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Marcacaos.
     */
    distinct?: MarcacaoScalarFieldEnum | MarcacaoScalarFieldEnum[]
  }


  /**
   * Marcacao findMany
   */
  export type MarcacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marcacao
     */
    select?: MarcacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MarcacaoInclude<ExtArgs> | null
    /**
     * Filter, which Marcacaos to fetch.
     */
    where?: MarcacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Marcacaos to fetch.
     */
    orderBy?: MarcacaoOrderByWithRelationInput | MarcacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Marcacaos.
     */
    cursor?: MarcacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Marcacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Marcacaos.
     */
    skip?: number
    distinct?: MarcacaoScalarFieldEnum | MarcacaoScalarFieldEnum[]
  }


  /**
   * Marcacao create
   */
  export type MarcacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marcacao
     */
    select?: MarcacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MarcacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Marcacao.
     */
    data: XOR<MarcacaoCreateInput, MarcacaoUncheckedCreateInput>
  }


  /**
   * Marcacao createMany
   */
  export type MarcacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Marcacaos.
     */
    data: MarcacaoCreateManyInput | MarcacaoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Marcacao update
   */
  export type MarcacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marcacao
     */
    select?: MarcacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MarcacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Marcacao.
     */
    data: XOR<MarcacaoUpdateInput, MarcacaoUncheckedUpdateInput>
    /**
     * Choose, which Marcacao to update.
     */
    where: MarcacaoWhereUniqueInput
  }


  /**
   * Marcacao updateMany
   */
  export type MarcacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Marcacaos.
     */
    data: XOR<MarcacaoUpdateManyMutationInput, MarcacaoUncheckedUpdateManyInput>
    /**
     * Filter which Marcacaos to update
     */
    where?: MarcacaoWhereInput
  }


  /**
   * Marcacao upsert
   */
  export type MarcacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marcacao
     */
    select?: MarcacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MarcacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Marcacao to update in case it exists.
     */
    where: MarcacaoWhereUniqueInput
    /**
     * In case the Marcacao found by the `where` argument doesn't exist, create a new Marcacao with this data.
     */
    create: XOR<MarcacaoCreateInput, MarcacaoUncheckedCreateInput>
    /**
     * In case the Marcacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MarcacaoUpdateInput, MarcacaoUncheckedUpdateInput>
  }


  /**
   * Marcacao delete
   */
  export type MarcacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marcacao
     */
    select?: MarcacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MarcacaoInclude<ExtArgs> | null
    /**
     * Filter which Marcacao to delete.
     */
    where: MarcacaoWhereUniqueInput
  }


  /**
   * Marcacao deleteMany
   */
  export type MarcacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Marcacaos to delete
     */
    where?: MarcacaoWhereInput
  }


  /**
   * Marcacao without action
   */
  export type MarcacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Marcacao
     */
    select?: MarcacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MarcacaoInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UtilizadorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    isAdmin: 'isAdmin'
  };

  export type UtilizadorScalarFieldEnum = (typeof UtilizadorScalarFieldEnum)[keyof typeof UtilizadorScalarFieldEnum]


  export const ViaturaScalarFieldEnum: {
    id: 'id',
    modelo: 'modelo',
    ano: 'ano',
    proprietarioId: 'proprietarioId'
  };

  export type ViaturaScalarFieldEnum = (typeof ViaturaScalarFieldEnum)[keyof typeof ViaturaScalarFieldEnum]


  export const ManutencaoScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao',
    data: 'data',
    custo: 'custo',
    viaturaId: 'viaturaId',
    categoriaId: 'categoriaId'
  };

  export type ManutencaoScalarFieldEnum = (typeof ManutencaoScalarFieldEnum)[keyof typeof ManutencaoScalarFieldEnum]


  export const CategoriaScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type CategoriaScalarFieldEnum = (typeof CategoriaScalarFieldEnum)[keyof typeof CategoriaScalarFieldEnum]


  export const MarcacaoScalarFieldEnum: {
    id: 'id',
    data: 'data',
    descricao: 'descricao',
    viaturaId: 'viaturaId'
  };

  export type MarcacaoScalarFieldEnum = (typeof MarcacaoScalarFieldEnum)[keyof typeof MarcacaoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UtilizadorWhereInput = {
    AND?: UtilizadorWhereInput | UtilizadorWhereInput[]
    OR?: UtilizadorWhereInput[]
    NOT?: UtilizadorWhereInput | UtilizadorWhereInput[]
    id?: IntFilter<"Utilizador"> | number
    name?: StringFilter<"Utilizador"> | string
    email?: StringFilter<"Utilizador"> | string
    password?: StringFilter<"Utilizador"> | string
    isAdmin?: BoolFilter<"Utilizador"> | boolean
    viaturas?: ViaturaListRelationFilter
  }

  export type UtilizadorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
    viaturas?: ViaturaOrderByRelationAggregateInput
  }

  export type UtilizadorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UtilizadorWhereInput | UtilizadorWhereInput[]
    OR?: UtilizadorWhereInput[]
    NOT?: UtilizadorWhereInput | UtilizadorWhereInput[]
    name?: StringFilter<"Utilizador"> | string
    password?: StringFilter<"Utilizador"> | string
    isAdmin?: BoolFilter<"Utilizador"> | boolean
    viaturas?: ViaturaListRelationFilter
  }, "id" | "email">

  export type UtilizadorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
    _count?: UtilizadorCountOrderByAggregateInput
    _avg?: UtilizadorAvgOrderByAggregateInput
    _max?: UtilizadorMaxOrderByAggregateInput
    _min?: UtilizadorMinOrderByAggregateInput
    _sum?: UtilizadorSumOrderByAggregateInput
  }

  export type UtilizadorScalarWhereWithAggregatesInput = {
    AND?: UtilizadorScalarWhereWithAggregatesInput | UtilizadorScalarWhereWithAggregatesInput[]
    OR?: UtilizadorScalarWhereWithAggregatesInput[]
    NOT?: UtilizadorScalarWhereWithAggregatesInput | UtilizadorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Utilizador"> | number
    name?: StringWithAggregatesFilter<"Utilizador"> | string
    email?: StringWithAggregatesFilter<"Utilizador"> | string
    password?: StringWithAggregatesFilter<"Utilizador"> | string
    isAdmin?: BoolWithAggregatesFilter<"Utilizador"> | boolean
  }

  export type ViaturaWhereInput = {
    AND?: ViaturaWhereInput | ViaturaWhereInput[]
    OR?: ViaturaWhereInput[]
    NOT?: ViaturaWhereInput | ViaturaWhereInput[]
    id?: IntFilter<"Viatura"> | number
    modelo?: StringFilter<"Viatura"> | string
    ano?: IntFilter<"Viatura"> | number
    proprietarioId?: IntFilter<"Viatura"> | number
    proprietario?: XOR<UtilizadorRelationFilter, UtilizadorWhereInput>
    manutencoes?: ManutencaoListRelationFilter
    Marcacao?: MarcacaoListRelationFilter
  }

  export type ViaturaOrderByWithRelationInput = {
    id?: SortOrder
    modelo?: SortOrder
    ano?: SortOrder
    proprietarioId?: SortOrder
    proprietario?: UtilizadorOrderByWithRelationInput
    manutencoes?: ManutencaoOrderByRelationAggregateInput
    Marcacao?: MarcacaoOrderByRelationAggregateInput
  }

  export type ViaturaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ViaturaWhereInput | ViaturaWhereInput[]
    OR?: ViaturaWhereInput[]
    NOT?: ViaturaWhereInput | ViaturaWhereInput[]
    modelo?: StringFilter<"Viatura"> | string
    ano?: IntFilter<"Viatura"> | number
    proprietarioId?: IntFilter<"Viatura"> | number
    proprietario?: XOR<UtilizadorRelationFilter, UtilizadorWhereInput>
    manutencoes?: ManutencaoListRelationFilter
    Marcacao?: MarcacaoListRelationFilter
  }, "id">

  export type ViaturaOrderByWithAggregationInput = {
    id?: SortOrder
    modelo?: SortOrder
    ano?: SortOrder
    proprietarioId?: SortOrder
    _count?: ViaturaCountOrderByAggregateInput
    _avg?: ViaturaAvgOrderByAggregateInput
    _max?: ViaturaMaxOrderByAggregateInput
    _min?: ViaturaMinOrderByAggregateInput
    _sum?: ViaturaSumOrderByAggregateInput
  }

  export type ViaturaScalarWhereWithAggregatesInput = {
    AND?: ViaturaScalarWhereWithAggregatesInput | ViaturaScalarWhereWithAggregatesInput[]
    OR?: ViaturaScalarWhereWithAggregatesInput[]
    NOT?: ViaturaScalarWhereWithAggregatesInput | ViaturaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Viatura"> | number
    modelo?: StringWithAggregatesFilter<"Viatura"> | string
    ano?: IntWithAggregatesFilter<"Viatura"> | number
    proprietarioId?: IntWithAggregatesFilter<"Viatura"> | number
  }

  export type ManutencaoWhereInput = {
    AND?: ManutencaoWhereInput | ManutencaoWhereInput[]
    OR?: ManutencaoWhereInput[]
    NOT?: ManutencaoWhereInput | ManutencaoWhereInput[]
    id?: IntFilter<"Manutencao"> | number
    descricao?: StringFilter<"Manutencao"> | string
    data?: DateTimeFilter<"Manutencao"> | Date | string
    custo?: FloatFilter<"Manutencao"> | number
    viaturaId?: IntFilter<"Manutencao"> | number
    categoriaId?: IntFilter<"Manutencao"> | number
    viatura?: XOR<ViaturaRelationFilter, ViaturaWhereInput>
    categoria?: XOR<CategoriaRelationFilter, CategoriaWhereInput>
  }

  export type ManutencaoOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    data?: SortOrder
    custo?: SortOrder
    viaturaId?: SortOrder
    categoriaId?: SortOrder
    viatura?: ViaturaOrderByWithRelationInput
    categoria?: CategoriaOrderByWithRelationInput
  }

  export type ManutencaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ManutencaoWhereInput | ManutencaoWhereInput[]
    OR?: ManutencaoWhereInput[]
    NOT?: ManutencaoWhereInput | ManutencaoWhereInput[]
    descricao?: StringFilter<"Manutencao"> | string
    data?: DateTimeFilter<"Manutencao"> | Date | string
    custo?: FloatFilter<"Manutencao"> | number
    viaturaId?: IntFilter<"Manutencao"> | number
    categoriaId?: IntFilter<"Manutencao"> | number
    viatura?: XOR<ViaturaRelationFilter, ViaturaWhereInput>
    categoria?: XOR<CategoriaRelationFilter, CategoriaWhereInput>
  }, "id">

  export type ManutencaoOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    data?: SortOrder
    custo?: SortOrder
    viaturaId?: SortOrder
    categoriaId?: SortOrder
    _count?: ManutencaoCountOrderByAggregateInput
    _avg?: ManutencaoAvgOrderByAggregateInput
    _max?: ManutencaoMaxOrderByAggregateInput
    _min?: ManutencaoMinOrderByAggregateInput
    _sum?: ManutencaoSumOrderByAggregateInput
  }

  export type ManutencaoScalarWhereWithAggregatesInput = {
    AND?: ManutencaoScalarWhereWithAggregatesInput | ManutencaoScalarWhereWithAggregatesInput[]
    OR?: ManutencaoScalarWhereWithAggregatesInput[]
    NOT?: ManutencaoScalarWhereWithAggregatesInput | ManutencaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Manutencao"> | number
    descricao?: StringWithAggregatesFilter<"Manutencao"> | string
    data?: DateTimeWithAggregatesFilter<"Manutencao"> | Date | string
    custo?: FloatWithAggregatesFilter<"Manutencao"> | number
    viaturaId?: IntWithAggregatesFilter<"Manutencao"> | number
    categoriaId?: IntWithAggregatesFilter<"Manutencao"> | number
  }

  export type CategoriaWhereInput = {
    AND?: CategoriaWhereInput | CategoriaWhereInput[]
    OR?: CategoriaWhereInput[]
    NOT?: CategoriaWhereInput | CategoriaWhereInput[]
    id?: IntFilter<"Categoria"> | number
    nome?: StringFilter<"Categoria"> | string
    manutencoes?: ManutencaoListRelationFilter
  }

  export type CategoriaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    manutencoes?: ManutencaoOrderByRelationAggregateInput
  }

  export type CategoriaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoriaWhereInput | CategoriaWhereInput[]
    OR?: CategoriaWhereInput[]
    NOT?: CategoriaWhereInput | CategoriaWhereInput[]
    nome?: StringFilter<"Categoria"> | string
    manutencoes?: ManutencaoListRelationFilter
  }, "id">

  export type CategoriaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: CategoriaCountOrderByAggregateInput
    _avg?: CategoriaAvgOrderByAggregateInput
    _max?: CategoriaMaxOrderByAggregateInput
    _min?: CategoriaMinOrderByAggregateInput
    _sum?: CategoriaSumOrderByAggregateInput
  }

  export type CategoriaScalarWhereWithAggregatesInput = {
    AND?: CategoriaScalarWhereWithAggregatesInput | CategoriaScalarWhereWithAggregatesInput[]
    OR?: CategoriaScalarWhereWithAggregatesInput[]
    NOT?: CategoriaScalarWhereWithAggregatesInput | CategoriaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Categoria"> | number
    nome?: StringWithAggregatesFilter<"Categoria"> | string
  }

  export type MarcacaoWhereInput = {
    AND?: MarcacaoWhereInput | MarcacaoWhereInput[]
    OR?: MarcacaoWhereInput[]
    NOT?: MarcacaoWhereInput | MarcacaoWhereInput[]
    id?: IntFilter<"Marcacao"> | number
    data?: DateTimeFilter<"Marcacao"> | Date | string
    descricao?: StringFilter<"Marcacao"> | string
    viaturaId?: IntFilter<"Marcacao"> | number
    viatura?: XOR<ViaturaRelationFilter, ViaturaWhereInput>
  }

  export type MarcacaoOrderByWithRelationInput = {
    id?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
    viaturaId?: SortOrder
    viatura?: ViaturaOrderByWithRelationInput
  }

  export type MarcacaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MarcacaoWhereInput | MarcacaoWhereInput[]
    OR?: MarcacaoWhereInput[]
    NOT?: MarcacaoWhereInput | MarcacaoWhereInput[]
    data?: DateTimeFilter<"Marcacao"> | Date | string
    descricao?: StringFilter<"Marcacao"> | string
    viaturaId?: IntFilter<"Marcacao"> | number
    viatura?: XOR<ViaturaRelationFilter, ViaturaWhereInput>
  }, "id">

  export type MarcacaoOrderByWithAggregationInput = {
    id?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
    viaturaId?: SortOrder
    _count?: MarcacaoCountOrderByAggregateInput
    _avg?: MarcacaoAvgOrderByAggregateInput
    _max?: MarcacaoMaxOrderByAggregateInput
    _min?: MarcacaoMinOrderByAggregateInput
    _sum?: MarcacaoSumOrderByAggregateInput
  }

  export type MarcacaoScalarWhereWithAggregatesInput = {
    AND?: MarcacaoScalarWhereWithAggregatesInput | MarcacaoScalarWhereWithAggregatesInput[]
    OR?: MarcacaoScalarWhereWithAggregatesInput[]
    NOT?: MarcacaoScalarWhereWithAggregatesInput | MarcacaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Marcacao"> | number
    data?: DateTimeWithAggregatesFilter<"Marcacao"> | Date | string
    descricao?: StringWithAggregatesFilter<"Marcacao"> | string
    viaturaId?: IntWithAggregatesFilter<"Marcacao"> | number
  }

  export type UtilizadorCreateInput = {
    name: string
    email: string
    password: string
    isAdmin?: boolean
    viaturas?: ViaturaCreateNestedManyWithoutProprietarioInput
  }

  export type UtilizadorUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    isAdmin?: boolean
    viaturas?: ViaturaUncheckedCreateNestedManyWithoutProprietarioInput
  }

  export type UtilizadorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    viaturas?: ViaturaUpdateManyWithoutProprietarioNestedInput
  }

  export type UtilizadorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    viaturas?: ViaturaUncheckedUpdateManyWithoutProprietarioNestedInput
  }

  export type UtilizadorCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    isAdmin?: boolean
  }

  export type UtilizadorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UtilizadorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ViaturaCreateInput = {
    modelo: string
    ano: number
    proprietario: UtilizadorCreateNestedOneWithoutViaturasInput
    manutencoes?: ManutencaoCreateNestedManyWithoutViaturaInput
    Marcacao?: MarcacaoCreateNestedManyWithoutViaturaInput
  }

  export type ViaturaUncheckedCreateInput = {
    id?: number
    modelo: string
    ano: number
    proprietarioId: number
    manutencoes?: ManutencaoUncheckedCreateNestedManyWithoutViaturaInput
    Marcacao?: MarcacaoUncheckedCreateNestedManyWithoutViaturaInput
  }

  export type ViaturaUpdateInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    proprietario?: UtilizadorUpdateOneRequiredWithoutViaturasNestedInput
    manutencoes?: ManutencaoUpdateManyWithoutViaturaNestedInput
    Marcacao?: MarcacaoUpdateManyWithoutViaturaNestedInput
  }

  export type ViaturaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    proprietarioId?: IntFieldUpdateOperationsInput | number
    manutencoes?: ManutencaoUncheckedUpdateManyWithoutViaturaNestedInput
    Marcacao?: MarcacaoUncheckedUpdateManyWithoutViaturaNestedInput
  }

  export type ViaturaCreateManyInput = {
    id?: number
    modelo: string
    ano: number
    proprietarioId: number
  }

  export type ViaturaUpdateManyMutationInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
  }

  export type ViaturaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    proprietarioId?: IntFieldUpdateOperationsInput | number
  }

  export type ManutencaoCreateInput = {
    descricao: string
    data: Date | string
    custo: number
    viatura: ViaturaCreateNestedOneWithoutManutencoesInput
    categoria: CategoriaCreateNestedOneWithoutManutencoesInput
  }

  export type ManutencaoUncheckedCreateInput = {
    id?: number
    descricao: string
    data: Date | string
    custo: number
    viaturaId: number
    categoriaId: number
  }

  export type ManutencaoUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    custo?: FloatFieldUpdateOperationsInput | number
    viatura?: ViaturaUpdateOneRequiredWithoutManutencoesNestedInput
    categoria?: CategoriaUpdateOneRequiredWithoutManutencoesNestedInput
  }

  export type ManutencaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    custo?: FloatFieldUpdateOperationsInput | number
    viaturaId?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
  }

  export type ManutencaoCreateManyInput = {
    id?: number
    descricao: string
    data: Date | string
    custo: number
    viaturaId: number
    categoriaId: number
  }

  export type ManutencaoUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    custo?: FloatFieldUpdateOperationsInput | number
  }

  export type ManutencaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    custo?: FloatFieldUpdateOperationsInput | number
    viaturaId?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriaCreateInput = {
    nome: string
    manutencoes?: ManutencaoCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaUncheckedCreateInput = {
    id?: number
    nome: string
    manutencoes?: ManutencaoUncheckedCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    manutencoes?: ManutencaoUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoriaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    manutencoes?: ManutencaoUncheckedUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoriaCreateManyInput = {
    id?: number
    nome: string
  }

  export type CategoriaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type MarcacaoCreateInput = {
    data: Date | string
    descricao: string
    viatura: ViaturaCreateNestedOneWithoutMarcacaoInput
  }

  export type MarcacaoUncheckedCreateInput = {
    id?: number
    data: Date | string
    descricao: string
    viaturaId: number
  }

  export type MarcacaoUpdateInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
    viatura?: ViaturaUpdateOneRequiredWithoutMarcacaoNestedInput
  }

  export type MarcacaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
    viaturaId?: IntFieldUpdateOperationsInput | number
  }

  export type MarcacaoCreateManyInput = {
    id?: number
    data: Date | string
    descricao: string
    viaturaId: number
  }

  export type MarcacaoUpdateManyMutationInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type MarcacaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
    viaturaId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ViaturaListRelationFilter = {
    every?: ViaturaWhereInput
    some?: ViaturaWhereInput
    none?: ViaturaWhereInput
  }

  export type ViaturaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UtilizadorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
  }

  export type UtilizadorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UtilizadorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
  }

  export type UtilizadorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
  }

  export type UtilizadorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UtilizadorRelationFilter = {
    is?: UtilizadorWhereInput
    isNot?: UtilizadorWhereInput
  }

  export type ManutencaoListRelationFilter = {
    every?: ManutencaoWhereInput
    some?: ManutencaoWhereInput
    none?: ManutencaoWhereInput
  }

  export type MarcacaoListRelationFilter = {
    every?: MarcacaoWhereInput
    some?: MarcacaoWhereInput
    none?: MarcacaoWhereInput
  }

  export type ManutencaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MarcacaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ViaturaCountOrderByAggregateInput = {
    id?: SortOrder
    modelo?: SortOrder
    ano?: SortOrder
    proprietarioId?: SortOrder
  }

  export type ViaturaAvgOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    proprietarioId?: SortOrder
  }

  export type ViaturaMaxOrderByAggregateInput = {
    id?: SortOrder
    modelo?: SortOrder
    ano?: SortOrder
    proprietarioId?: SortOrder
  }

  export type ViaturaMinOrderByAggregateInput = {
    id?: SortOrder
    modelo?: SortOrder
    ano?: SortOrder
    proprietarioId?: SortOrder
  }

  export type ViaturaSumOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    proprietarioId?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ViaturaRelationFilter = {
    is?: ViaturaWhereInput
    isNot?: ViaturaWhereInput
  }

  export type CategoriaRelationFilter = {
    is?: CategoriaWhereInput
    isNot?: CategoriaWhereInput
  }

  export type ManutencaoCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    data?: SortOrder
    custo?: SortOrder
    viaturaId?: SortOrder
    categoriaId?: SortOrder
  }

  export type ManutencaoAvgOrderByAggregateInput = {
    id?: SortOrder
    custo?: SortOrder
    viaturaId?: SortOrder
    categoriaId?: SortOrder
  }

  export type ManutencaoMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    data?: SortOrder
    custo?: SortOrder
    viaturaId?: SortOrder
    categoriaId?: SortOrder
  }

  export type ManutencaoMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    data?: SortOrder
    custo?: SortOrder
    viaturaId?: SortOrder
    categoriaId?: SortOrder
  }

  export type ManutencaoSumOrderByAggregateInput = {
    id?: SortOrder
    custo?: SortOrder
    viaturaId?: SortOrder
    categoriaId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CategoriaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type CategoriaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoriaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type CategoriaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type CategoriaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MarcacaoCountOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
    viaturaId?: SortOrder
  }

  export type MarcacaoAvgOrderByAggregateInput = {
    id?: SortOrder
    viaturaId?: SortOrder
  }

  export type MarcacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
    viaturaId?: SortOrder
  }

  export type MarcacaoMinOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
    viaturaId?: SortOrder
  }

  export type MarcacaoSumOrderByAggregateInput = {
    id?: SortOrder
    viaturaId?: SortOrder
  }

  export type ViaturaCreateNestedManyWithoutProprietarioInput = {
    create?: XOR<ViaturaCreateWithoutProprietarioInput, ViaturaUncheckedCreateWithoutProprietarioInput> | ViaturaCreateWithoutProprietarioInput[] | ViaturaUncheckedCreateWithoutProprietarioInput[]
    connectOrCreate?: ViaturaCreateOrConnectWithoutProprietarioInput | ViaturaCreateOrConnectWithoutProprietarioInput[]
    createMany?: ViaturaCreateManyProprietarioInputEnvelope
    connect?: ViaturaWhereUniqueInput | ViaturaWhereUniqueInput[]
  }

  export type ViaturaUncheckedCreateNestedManyWithoutProprietarioInput = {
    create?: XOR<ViaturaCreateWithoutProprietarioInput, ViaturaUncheckedCreateWithoutProprietarioInput> | ViaturaCreateWithoutProprietarioInput[] | ViaturaUncheckedCreateWithoutProprietarioInput[]
    connectOrCreate?: ViaturaCreateOrConnectWithoutProprietarioInput | ViaturaCreateOrConnectWithoutProprietarioInput[]
    createMany?: ViaturaCreateManyProprietarioInputEnvelope
    connect?: ViaturaWhereUniqueInput | ViaturaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ViaturaUpdateManyWithoutProprietarioNestedInput = {
    create?: XOR<ViaturaCreateWithoutProprietarioInput, ViaturaUncheckedCreateWithoutProprietarioInput> | ViaturaCreateWithoutProprietarioInput[] | ViaturaUncheckedCreateWithoutProprietarioInput[]
    connectOrCreate?: ViaturaCreateOrConnectWithoutProprietarioInput | ViaturaCreateOrConnectWithoutProprietarioInput[]
    upsert?: ViaturaUpsertWithWhereUniqueWithoutProprietarioInput | ViaturaUpsertWithWhereUniqueWithoutProprietarioInput[]
    createMany?: ViaturaCreateManyProprietarioInputEnvelope
    set?: ViaturaWhereUniqueInput | ViaturaWhereUniqueInput[]
    disconnect?: ViaturaWhereUniqueInput | ViaturaWhereUniqueInput[]
    delete?: ViaturaWhereUniqueInput | ViaturaWhereUniqueInput[]
    connect?: ViaturaWhereUniqueInput | ViaturaWhereUniqueInput[]
    update?: ViaturaUpdateWithWhereUniqueWithoutProprietarioInput | ViaturaUpdateWithWhereUniqueWithoutProprietarioInput[]
    updateMany?: ViaturaUpdateManyWithWhereWithoutProprietarioInput | ViaturaUpdateManyWithWhereWithoutProprietarioInput[]
    deleteMany?: ViaturaScalarWhereInput | ViaturaScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ViaturaUncheckedUpdateManyWithoutProprietarioNestedInput = {
    create?: XOR<ViaturaCreateWithoutProprietarioInput, ViaturaUncheckedCreateWithoutProprietarioInput> | ViaturaCreateWithoutProprietarioInput[] | ViaturaUncheckedCreateWithoutProprietarioInput[]
    connectOrCreate?: ViaturaCreateOrConnectWithoutProprietarioInput | ViaturaCreateOrConnectWithoutProprietarioInput[]
    upsert?: ViaturaUpsertWithWhereUniqueWithoutProprietarioInput | ViaturaUpsertWithWhereUniqueWithoutProprietarioInput[]
    createMany?: ViaturaCreateManyProprietarioInputEnvelope
    set?: ViaturaWhereUniqueInput | ViaturaWhereUniqueInput[]
    disconnect?: ViaturaWhereUniqueInput | ViaturaWhereUniqueInput[]
    delete?: ViaturaWhereUniqueInput | ViaturaWhereUniqueInput[]
    connect?: ViaturaWhereUniqueInput | ViaturaWhereUniqueInput[]
    update?: ViaturaUpdateWithWhereUniqueWithoutProprietarioInput | ViaturaUpdateWithWhereUniqueWithoutProprietarioInput[]
    updateMany?: ViaturaUpdateManyWithWhereWithoutProprietarioInput | ViaturaUpdateManyWithWhereWithoutProprietarioInput[]
    deleteMany?: ViaturaScalarWhereInput | ViaturaScalarWhereInput[]
  }

  export type UtilizadorCreateNestedOneWithoutViaturasInput = {
    create?: XOR<UtilizadorCreateWithoutViaturasInput, UtilizadorUncheckedCreateWithoutViaturasInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutViaturasInput
    connect?: UtilizadorWhereUniqueInput
  }

  export type ManutencaoCreateNestedManyWithoutViaturaInput = {
    create?: XOR<ManutencaoCreateWithoutViaturaInput, ManutencaoUncheckedCreateWithoutViaturaInput> | ManutencaoCreateWithoutViaturaInput[] | ManutencaoUncheckedCreateWithoutViaturaInput[]
    connectOrCreate?: ManutencaoCreateOrConnectWithoutViaturaInput | ManutencaoCreateOrConnectWithoutViaturaInput[]
    createMany?: ManutencaoCreateManyViaturaInputEnvelope
    connect?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
  }

  export type MarcacaoCreateNestedManyWithoutViaturaInput = {
    create?: XOR<MarcacaoCreateWithoutViaturaInput, MarcacaoUncheckedCreateWithoutViaturaInput> | MarcacaoCreateWithoutViaturaInput[] | MarcacaoUncheckedCreateWithoutViaturaInput[]
    connectOrCreate?: MarcacaoCreateOrConnectWithoutViaturaInput | MarcacaoCreateOrConnectWithoutViaturaInput[]
    createMany?: MarcacaoCreateManyViaturaInputEnvelope
    connect?: MarcacaoWhereUniqueInput | MarcacaoWhereUniqueInput[]
  }

  export type ManutencaoUncheckedCreateNestedManyWithoutViaturaInput = {
    create?: XOR<ManutencaoCreateWithoutViaturaInput, ManutencaoUncheckedCreateWithoutViaturaInput> | ManutencaoCreateWithoutViaturaInput[] | ManutencaoUncheckedCreateWithoutViaturaInput[]
    connectOrCreate?: ManutencaoCreateOrConnectWithoutViaturaInput | ManutencaoCreateOrConnectWithoutViaturaInput[]
    createMany?: ManutencaoCreateManyViaturaInputEnvelope
    connect?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
  }

  export type MarcacaoUncheckedCreateNestedManyWithoutViaturaInput = {
    create?: XOR<MarcacaoCreateWithoutViaturaInput, MarcacaoUncheckedCreateWithoutViaturaInput> | MarcacaoCreateWithoutViaturaInput[] | MarcacaoUncheckedCreateWithoutViaturaInput[]
    connectOrCreate?: MarcacaoCreateOrConnectWithoutViaturaInput | MarcacaoCreateOrConnectWithoutViaturaInput[]
    createMany?: MarcacaoCreateManyViaturaInputEnvelope
    connect?: MarcacaoWhereUniqueInput | MarcacaoWhereUniqueInput[]
  }

  export type UtilizadorUpdateOneRequiredWithoutViaturasNestedInput = {
    create?: XOR<UtilizadorCreateWithoutViaturasInput, UtilizadorUncheckedCreateWithoutViaturasInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutViaturasInput
    upsert?: UtilizadorUpsertWithoutViaturasInput
    connect?: UtilizadorWhereUniqueInput
    update?: XOR<XOR<UtilizadorUpdateToOneWithWhereWithoutViaturasInput, UtilizadorUpdateWithoutViaturasInput>, UtilizadorUncheckedUpdateWithoutViaturasInput>
  }

  export type ManutencaoUpdateManyWithoutViaturaNestedInput = {
    create?: XOR<ManutencaoCreateWithoutViaturaInput, ManutencaoUncheckedCreateWithoutViaturaInput> | ManutencaoCreateWithoutViaturaInput[] | ManutencaoUncheckedCreateWithoutViaturaInput[]
    connectOrCreate?: ManutencaoCreateOrConnectWithoutViaturaInput | ManutencaoCreateOrConnectWithoutViaturaInput[]
    upsert?: ManutencaoUpsertWithWhereUniqueWithoutViaturaInput | ManutencaoUpsertWithWhereUniqueWithoutViaturaInput[]
    createMany?: ManutencaoCreateManyViaturaInputEnvelope
    set?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    disconnect?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    delete?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    connect?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    update?: ManutencaoUpdateWithWhereUniqueWithoutViaturaInput | ManutencaoUpdateWithWhereUniqueWithoutViaturaInput[]
    updateMany?: ManutencaoUpdateManyWithWhereWithoutViaturaInput | ManutencaoUpdateManyWithWhereWithoutViaturaInput[]
    deleteMany?: ManutencaoScalarWhereInput | ManutencaoScalarWhereInput[]
  }

  export type MarcacaoUpdateManyWithoutViaturaNestedInput = {
    create?: XOR<MarcacaoCreateWithoutViaturaInput, MarcacaoUncheckedCreateWithoutViaturaInput> | MarcacaoCreateWithoutViaturaInput[] | MarcacaoUncheckedCreateWithoutViaturaInput[]
    connectOrCreate?: MarcacaoCreateOrConnectWithoutViaturaInput | MarcacaoCreateOrConnectWithoutViaturaInput[]
    upsert?: MarcacaoUpsertWithWhereUniqueWithoutViaturaInput | MarcacaoUpsertWithWhereUniqueWithoutViaturaInput[]
    createMany?: MarcacaoCreateManyViaturaInputEnvelope
    set?: MarcacaoWhereUniqueInput | MarcacaoWhereUniqueInput[]
    disconnect?: MarcacaoWhereUniqueInput | MarcacaoWhereUniqueInput[]
    delete?: MarcacaoWhereUniqueInput | MarcacaoWhereUniqueInput[]
    connect?: MarcacaoWhereUniqueInput | MarcacaoWhereUniqueInput[]
    update?: MarcacaoUpdateWithWhereUniqueWithoutViaturaInput | MarcacaoUpdateWithWhereUniqueWithoutViaturaInput[]
    updateMany?: MarcacaoUpdateManyWithWhereWithoutViaturaInput | MarcacaoUpdateManyWithWhereWithoutViaturaInput[]
    deleteMany?: MarcacaoScalarWhereInput | MarcacaoScalarWhereInput[]
  }

  export type ManutencaoUncheckedUpdateManyWithoutViaturaNestedInput = {
    create?: XOR<ManutencaoCreateWithoutViaturaInput, ManutencaoUncheckedCreateWithoutViaturaInput> | ManutencaoCreateWithoutViaturaInput[] | ManutencaoUncheckedCreateWithoutViaturaInput[]
    connectOrCreate?: ManutencaoCreateOrConnectWithoutViaturaInput | ManutencaoCreateOrConnectWithoutViaturaInput[]
    upsert?: ManutencaoUpsertWithWhereUniqueWithoutViaturaInput | ManutencaoUpsertWithWhereUniqueWithoutViaturaInput[]
    createMany?: ManutencaoCreateManyViaturaInputEnvelope
    set?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    disconnect?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    delete?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    connect?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    update?: ManutencaoUpdateWithWhereUniqueWithoutViaturaInput | ManutencaoUpdateWithWhereUniqueWithoutViaturaInput[]
    updateMany?: ManutencaoUpdateManyWithWhereWithoutViaturaInput | ManutencaoUpdateManyWithWhereWithoutViaturaInput[]
    deleteMany?: ManutencaoScalarWhereInput | ManutencaoScalarWhereInput[]
  }

  export type MarcacaoUncheckedUpdateManyWithoutViaturaNestedInput = {
    create?: XOR<MarcacaoCreateWithoutViaturaInput, MarcacaoUncheckedCreateWithoutViaturaInput> | MarcacaoCreateWithoutViaturaInput[] | MarcacaoUncheckedCreateWithoutViaturaInput[]
    connectOrCreate?: MarcacaoCreateOrConnectWithoutViaturaInput | MarcacaoCreateOrConnectWithoutViaturaInput[]
    upsert?: MarcacaoUpsertWithWhereUniqueWithoutViaturaInput | MarcacaoUpsertWithWhereUniqueWithoutViaturaInput[]
    createMany?: MarcacaoCreateManyViaturaInputEnvelope
    set?: MarcacaoWhereUniqueInput | MarcacaoWhereUniqueInput[]
    disconnect?: MarcacaoWhereUniqueInput | MarcacaoWhereUniqueInput[]
    delete?: MarcacaoWhereUniqueInput | MarcacaoWhereUniqueInput[]
    connect?: MarcacaoWhereUniqueInput | MarcacaoWhereUniqueInput[]
    update?: MarcacaoUpdateWithWhereUniqueWithoutViaturaInput | MarcacaoUpdateWithWhereUniqueWithoutViaturaInput[]
    updateMany?: MarcacaoUpdateManyWithWhereWithoutViaturaInput | MarcacaoUpdateManyWithWhereWithoutViaturaInput[]
    deleteMany?: MarcacaoScalarWhereInput | MarcacaoScalarWhereInput[]
  }

  export type ViaturaCreateNestedOneWithoutManutencoesInput = {
    create?: XOR<ViaturaCreateWithoutManutencoesInput, ViaturaUncheckedCreateWithoutManutencoesInput>
    connectOrCreate?: ViaturaCreateOrConnectWithoutManutencoesInput
    connect?: ViaturaWhereUniqueInput
  }

  export type CategoriaCreateNestedOneWithoutManutencoesInput = {
    create?: XOR<CategoriaCreateWithoutManutencoesInput, CategoriaUncheckedCreateWithoutManutencoesInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutManutencoesInput
    connect?: CategoriaWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ViaturaUpdateOneRequiredWithoutManutencoesNestedInput = {
    create?: XOR<ViaturaCreateWithoutManutencoesInput, ViaturaUncheckedCreateWithoutManutencoesInput>
    connectOrCreate?: ViaturaCreateOrConnectWithoutManutencoesInput
    upsert?: ViaturaUpsertWithoutManutencoesInput
    connect?: ViaturaWhereUniqueInput
    update?: XOR<XOR<ViaturaUpdateToOneWithWhereWithoutManutencoesInput, ViaturaUpdateWithoutManutencoesInput>, ViaturaUncheckedUpdateWithoutManutencoesInput>
  }

  export type CategoriaUpdateOneRequiredWithoutManutencoesNestedInput = {
    create?: XOR<CategoriaCreateWithoutManutencoesInput, CategoriaUncheckedCreateWithoutManutencoesInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutManutencoesInput
    upsert?: CategoriaUpsertWithoutManutencoesInput
    connect?: CategoriaWhereUniqueInput
    update?: XOR<XOR<CategoriaUpdateToOneWithWhereWithoutManutencoesInput, CategoriaUpdateWithoutManutencoesInput>, CategoriaUncheckedUpdateWithoutManutencoesInput>
  }

  export type ManutencaoCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<ManutencaoCreateWithoutCategoriaInput, ManutencaoUncheckedCreateWithoutCategoriaInput> | ManutencaoCreateWithoutCategoriaInput[] | ManutencaoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: ManutencaoCreateOrConnectWithoutCategoriaInput | ManutencaoCreateOrConnectWithoutCategoriaInput[]
    createMany?: ManutencaoCreateManyCategoriaInputEnvelope
    connect?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
  }

  export type ManutencaoUncheckedCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<ManutencaoCreateWithoutCategoriaInput, ManutencaoUncheckedCreateWithoutCategoriaInput> | ManutencaoCreateWithoutCategoriaInput[] | ManutencaoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: ManutencaoCreateOrConnectWithoutCategoriaInput | ManutencaoCreateOrConnectWithoutCategoriaInput[]
    createMany?: ManutencaoCreateManyCategoriaInputEnvelope
    connect?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
  }

  export type ManutencaoUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<ManutencaoCreateWithoutCategoriaInput, ManutencaoUncheckedCreateWithoutCategoriaInput> | ManutencaoCreateWithoutCategoriaInput[] | ManutencaoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: ManutencaoCreateOrConnectWithoutCategoriaInput | ManutencaoCreateOrConnectWithoutCategoriaInput[]
    upsert?: ManutencaoUpsertWithWhereUniqueWithoutCategoriaInput | ManutencaoUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: ManutencaoCreateManyCategoriaInputEnvelope
    set?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    disconnect?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    delete?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    connect?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    update?: ManutencaoUpdateWithWhereUniqueWithoutCategoriaInput | ManutencaoUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: ManutencaoUpdateManyWithWhereWithoutCategoriaInput | ManutencaoUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: ManutencaoScalarWhereInput | ManutencaoScalarWhereInput[]
  }

  export type ManutencaoUncheckedUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<ManutencaoCreateWithoutCategoriaInput, ManutencaoUncheckedCreateWithoutCategoriaInput> | ManutencaoCreateWithoutCategoriaInput[] | ManutencaoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: ManutencaoCreateOrConnectWithoutCategoriaInput | ManutencaoCreateOrConnectWithoutCategoriaInput[]
    upsert?: ManutencaoUpsertWithWhereUniqueWithoutCategoriaInput | ManutencaoUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: ManutencaoCreateManyCategoriaInputEnvelope
    set?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    disconnect?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    delete?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    connect?: ManutencaoWhereUniqueInput | ManutencaoWhereUniqueInput[]
    update?: ManutencaoUpdateWithWhereUniqueWithoutCategoriaInput | ManutencaoUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: ManutencaoUpdateManyWithWhereWithoutCategoriaInput | ManutencaoUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: ManutencaoScalarWhereInput | ManutencaoScalarWhereInput[]
  }

  export type ViaturaCreateNestedOneWithoutMarcacaoInput = {
    create?: XOR<ViaturaCreateWithoutMarcacaoInput, ViaturaUncheckedCreateWithoutMarcacaoInput>
    connectOrCreate?: ViaturaCreateOrConnectWithoutMarcacaoInput
    connect?: ViaturaWhereUniqueInput
  }

  export type ViaturaUpdateOneRequiredWithoutMarcacaoNestedInput = {
    create?: XOR<ViaturaCreateWithoutMarcacaoInput, ViaturaUncheckedCreateWithoutMarcacaoInput>
    connectOrCreate?: ViaturaCreateOrConnectWithoutMarcacaoInput
    upsert?: ViaturaUpsertWithoutMarcacaoInput
    connect?: ViaturaWhereUniqueInput
    update?: XOR<XOR<ViaturaUpdateToOneWithWhereWithoutMarcacaoInput, ViaturaUpdateWithoutMarcacaoInput>, ViaturaUncheckedUpdateWithoutMarcacaoInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ViaturaCreateWithoutProprietarioInput = {
    modelo: string
    ano: number
    manutencoes?: ManutencaoCreateNestedManyWithoutViaturaInput
    Marcacao?: MarcacaoCreateNestedManyWithoutViaturaInput
  }

  export type ViaturaUncheckedCreateWithoutProprietarioInput = {
    id?: number
    modelo: string
    ano: number
    manutencoes?: ManutencaoUncheckedCreateNestedManyWithoutViaturaInput
    Marcacao?: MarcacaoUncheckedCreateNestedManyWithoutViaturaInput
  }

  export type ViaturaCreateOrConnectWithoutProprietarioInput = {
    where: ViaturaWhereUniqueInput
    create: XOR<ViaturaCreateWithoutProprietarioInput, ViaturaUncheckedCreateWithoutProprietarioInput>
  }

  export type ViaturaCreateManyProprietarioInputEnvelope = {
    data: ViaturaCreateManyProprietarioInput | ViaturaCreateManyProprietarioInput[]
    skipDuplicates?: boolean
  }

  export type ViaturaUpsertWithWhereUniqueWithoutProprietarioInput = {
    where: ViaturaWhereUniqueInput
    update: XOR<ViaturaUpdateWithoutProprietarioInput, ViaturaUncheckedUpdateWithoutProprietarioInput>
    create: XOR<ViaturaCreateWithoutProprietarioInput, ViaturaUncheckedCreateWithoutProprietarioInput>
  }

  export type ViaturaUpdateWithWhereUniqueWithoutProprietarioInput = {
    where: ViaturaWhereUniqueInput
    data: XOR<ViaturaUpdateWithoutProprietarioInput, ViaturaUncheckedUpdateWithoutProprietarioInput>
  }

  export type ViaturaUpdateManyWithWhereWithoutProprietarioInput = {
    where: ViaturaScalarWhereInput
    data: XOR<ViaturaUpdateManyMutationInput, ViaturaUncheckedUpdateManyWithoutProprietarioInput>
  }

  export type ViaturaScalarWhereInput = {
    AND?: ViaturaScalarWhereInput | ViaturaScalarWhereInput[]
    OR?: ViaturaScalarWhereInput[]
    NOT?: ViaturaScalarWhereInput | ViaturaScalarWhereInput[]
    id?: IntFilter<"Viatura"> | number
    modelo?: StringFilter<"Viatura"> | string
    ano?: IntFilter<"Viatura"> | number
    proprietarioId?: IntFilter<"Viatura"> | number
  }

  export type UtilizadorCreateWithoutViaturasInput = {
    name: string
    email: string
    password: string
    isAdmin?: boolean
  }

  export type UtilizadorUncheckedCreateWithoutViaturasInput = {
    id?: number
    name: string
    email: string
    password: string
    isAdmin?: boolean
  }

  export type UtilizadorCreateOrConnectWithoutViaturasInput = {
    where: UtilizadorWhereUniqueInput
    create: XOR<UtilizadorCreateWithoutViaturasInput, UtilizadorUncheckedCreateWithoutViaturasInput>
  }

  export type ManutencaoCreateWithoutViaturaInput = {
    descricao: string
    data: Date | string
    custo: number
    categoria: CategoriaCreateNestedOneWithoutManutencoesInput
  }

  export type ManutencaoUncheckedCreateWithoutViaturaInput = {
    id?: number
    descricao: string
    data: Date | string
    custo: number
    categoriaId: number
  }

  export type ManutencaoCreateOrConnectWithoutViaturaInput = {
    where: ManutencaoWhereUniqueInput
    create: XOR<ManutencaoCreateWithoutViaturaInput, ManutencaoUncheckedCreateWithoutViaturaInput>
  }

  export type ManutencaoCreateManyViaturaInputEnvelope = {
    data: ManutencaoCreateManyViaturaInput | ManutencaoCreateManyViaturaInput[]
    skipDuplicates?: boolean
  }

  export type MarcacaoCreateWithoutViaturaInput = {
    data: Date | string
    descricao: string
  }

  export type MarcacaoUncheckedCreateWithoutViaturaInput = {
    id?: number
    data: Date | string
    descricao: string
  }

  export type MarcacaoCreateOrConnectWithoutViaturaInput = {
    where: MarcacaoWhereUniqueInput
    create: XOR<MarcacaoCreateWithoutViaturaInput, MarcacaoUncheckedCreateWithoutViaturaInput>
  }

  export type MarcacaoCreateManyViaturaInputEnvelope = {
    data: MarcacaoCreateManyViaturaInput | MarcacaoCreateManyViaturaInput[]
    skipDuplicates?: boolean
  }

  export type UtilizadorUpsertWithoutViaturasInput = {
    update: XOR<UtilizadorUpdateWithoutViaturasInput, UtilizadorUncheckedUpdateWithoutViaturasInput>
    create: XOR<UtilizadorCreateWithoutViaturasInput, UtilizadorUncheckedCreateWithoutViaturasInput>
    where?: UtilizadorWhereInput
  }

  export type UtilizadorUpdateToOneWithWhereWithoutViaturasInput = {
    where?: UtilizadorWhereInput
    data: XOR<UtilizadorUpdateWithoutViaturasInput, UtilizadorUncheckedUpdateWithoutViaturasInput>
  }

  export type UtilizadorUpdateWithoutViaturasInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UtilizadorUncheckedUpdateWithoutViaturasInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ManutencaoUpsertWithWhereUniqueWithoutViaturaInput = {
    where: ManutencaoWhereUniqueInput
    update: XOR<ManutencaoUpdateWithoutViaturaInput, ManutencaoUncheckedUpdateWithoutViaturaInput>
    create: XOR<ManutencaoCreateWithoutViaturaInput, ManutencaoUncheckedCreateWithoutViaturaInput>
  }

  export type ManutencaoUpdateWithWhereUniqueWithoutViaturaInput = {
    where: ManutencaoWhereUniqueInput
    data: XOR<ManutencaoUpdateWithoutViaturaInput, ManutencaoUncheckedUpdateWithoutViaturaInput>
  }

  export type ManutencaoUpdateManyWithWhereWithoutViaturaInput = {
    where: ManutencaoScalarWhereInput
    data: XOR<ManutencaoUpdateManyMutationInput, ManutencaoUncheckedUpdateManyWithoutViaturaInput>
  }

  export type ManutencaoScalarWhereInput = {
    AND?: ManutencaoScalarWhereInput | ManutencaoScalarWhereInput[]
    OR?: ManutencaoScalarWhereInput[]
    NOT?: ManutencaoScalarWhereInput | ManutencaoScalarWhereInput[]
    id?: IntFilter<"Manutencao"> | number
    descricao?: StringFilter<"Manutencao"> | string
    data?: DateTimeFilter<"Manutencao"> | Date | string
    custo?: FloatFilter<"Manutencao"> | number
    viaturaId?: IntFilter<"Manutencao"> | number
    categoriaId?: IntFilter<"Manutencao"> | number
  }

  export type MarcacaoUpsertWithWhereUniqueWithoutViaturaInput = {
    where: MarcacaoWhereUniqueInput
    update: XOR<MarcacaoUpdateWithoutViaturaInput, MarcacaoUncheckedUpdateWithoutViaturaInput>
    create: XOR<MarcacaoCreateWithoutViaturaInput, MarcacaoUncheckedCreateWithoutViaturaInput>
  }

  export type MarcacaoUpdateWithWhereUniqueWithoutViaturaInput = {
    where: MarcacaoWhereUniqueInput
    data: XOR<MarcacaoUpdateWithoutViaturaInput, MarcacaoUncheckedUpdateWithoutViaturaInput>
  }

  export type MarcacaoUpdateManyWithWhereWithoutViaturaInput = {
    where: MarcacaoScalarWhereInput
    data: XOR<MarcacaoUpdateManyMutationInput, MarcacaoUncheckedUpdateManyWithoutViaturaInput>
  }

  export type MarcacaoScalarWhereInput = {
    AND?: MarcacaoScalarWhereInput | MarcacaoScalarWhereInput[]
    OR?: MarcacaoScalarWhereInput[]
    NOT?: MarcacaoScalarWhereInput | MarcacaoScalarWhereInput[]
    id?: IntFilter<"Marcacao"> | number
    data?: DateTimeFilter<"Marcacao"> | Date | string
    descricao?: StringFilter<"Marcacao"> | string
    viaturaId?: IntFilter<"Marcacao"> | number
  }

  export type ViaturaCreateWithoutManutencoesInput = {
    modelo: string
    ano: number
    proprietario: UtilizadorCreateNestedOneWithoutViaturasInput
    Marcacao?: MarcacaoCreateNestedManyWithoutViaturaInput
  }

  export type ViaturaUncheckedCreateWithoutManutencoesInput = {
    id?: number
    modelo: string
    ano: number
    proprietarioId: number
    Marcacao?: MarcacaoUncheckedCreateNestedManyWithoutViaturaInput
  }

  export type ViaturaCreateOrConnectWithoutManutencoesInput = {
    where: ViaturaWhereUniqueInput
    create: XOR<ViaturaCreateWithoutManutencoesInput, ViaturaUncheckedCreateWithoutManutencoesInput>
  }

  export type CategoriaCreateWithoutManutencoesInput = {
    nome: string
  }

  export type CategoriaUncheckedCreateWithoutManutencoesInput = {
    id?: number
    nome: string
  }

  export type CategoriaCreateOrConnectWithoutManutencoesInput = {
    where: CategoriaWhereUniqueInput
    create: XOR<CategoriaCreateWithoutManutencoesInput, CategoriaUncheckedCreateWithoutManutencoesInput>
  }

  export type ViaturaUpsertWithoutManutencoesInput = {
    update: XOR<ViaturaUpdateWithoutManutencoesInput, ViaturaUncheckedUpdateWithoutManutencoesInput>
    create: XOR<ViaturaCreateWithoutManutencoesInput, ViaturaUncheckedCreateWithoutManutencoesInput>
    where?: ViaturaWhereInput
  }

  export type ViaturaUpdateToOneWithWhereWithoutManutencoesInput = {
    where?: ViaturaWhereInput
    data: XOR<ViaturaUpdateWithoutManutencoesInput, ViaturaUncheckedUpdateWithoutManutencoesInput>
  }

  export type ViaturaUpdateWithoutManutencoesInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    proprietario?: UtilizadorUpdateOneRequiredWithoutViaturasNestedInput
    Marcacao?: MarcacaoUpdateManyWithoutViaturaNestedInput
  }

  export type ViaturaUncheckedUpdateWithoutManutencoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    proprietarioId?: IntFieldUpdateOperationsInput | number
    Marcacao?: MarcacaoUncheckedUpdateManyWithoutViaturaNestedInput
  }

  export type CategoriaUpsertWithoutManutencoesInput = {
    update: XOR<CategoriaUpdateWithoutManutencoesInput, CategoriaUncheckedUpdateWithoutManutencoesInput>
    create: XOR<CategoriaCreateWithoutManutencoesInput, CategoriaUncheckedCreateWithoutManutencoesInput>
    where?: CategoriaWhereInput
  }

  export type CategoriaUpdateToOneWithWhereWithoutManutencoesInput = {
    where?: CategoriaWhereInput
    data: XOR<CategoriaUpdateWithoutManutencoesInput, CategoriaUncheckedUpdateWithoutManutencoesInput>
  }

  export type CategoriaUpdateWithoutManutencoesInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaUncheckedUpdateWithoutManutencoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ManutencaoCreateWithoutCategoriaInput = {
    descricao: string
    data: Date | string
    custo: number
    viatura: ViaturaCreateNestedOneWithoutManutencoesInput
  }

  export type ManutencaoUncheckedCreateWithoutCategoriaInput = {
    id?: number
    descricao: string
    data: Date | string
    custo: number
    viaturaId: number
  }

  export type ManutencaoCreateOrConnectWithoutCategoriaInput = {
    where: ManutencaoWhereUniqueInput
    create: XOR<ManutencaoCreateWithoutCategoriaInput, ManutencaoUncheckedCreateWithoutCategoriaInput>
  }

  export type ManutencaoCreateManyCategoriaInputEnvelope = {
    data: ManutencaoCreateManyCategoriaInput | ManutencaoCreateManyCategoriaInput[]
    skipDuplicates?: boolean
  }

  export type ManutencaoUpsertWithWhereUniqueWithoutCategoriaInput = {
    where: ManutencaoWhereUniqueInput
    update: XOR<ManutencaoUpdateWithoutCategoriaInput, ManutencaoUncheckedUpdateWithoutCategoriaInput>
    create: XOR<ManutencaoCreateWithoutCategoriaInput, ManutencaoUncheckedCreateWithoutCategoriaInput>
  }

  export type ManutencaoUpdateWithWhereUniqueWithoutCategoriaInput = {
    where: ManutencaoWhereUniqueInput
    data: XOR<ManutencaoUpdateWithoutCategoriaInput, ManutencaoUncheckedUpdateWithoutCategoriaInput>
  }

  export type ManutencaoUpdateManyWithWhereWithoutCategoriaInput = {
    where: ManutencaoScalarWhereInput
    data: XOR<ManutencaoUpdateManyMutationInput, ManutencaoUncheckedUpdateManyWithoutCategoriaInput>
  }

  export type ViaturaCreateWithoutMarcacaoInput = {
    modelo: string
    ano: number
    proprietario: UtilizadorCreateNestedOneWithoutViaturasInput
    manutencoes?: ManutencaoCreateNestedManyWithoutViaturaInput
  }

  export type ViaturaUncheckedCreateWithoutMarcacaoInput = {
    id?: number
    modelo: string
    ano: number
    proprietarioId: number
    manutencoes?: ManutencaoUncheckedCreateNestedManyWithoutViaturaInput
  }

  export type ViaturaCreateOrConnectWithoutMarcacaoInput = {
    where: ViaturaWhereUniqueInput
    create: XOR<ViaturaCreateWithoutMarcacaoInput, ViaturaUncheckedCreateWithoutMarcacaoInput>
  }

  export type ViaturaUpsertWithoutMarcacaoInput = {
    update: XOR<ViaturaUpdateWithoutMarcacaoInput, ViaturaUncheckedUpdateWithoutMarcacaoInput>
    create: XOR<ViaturaCreateWithoutMarcacaoInput, ViaturaUncheckedCreateWithoutMarcacaoInput>
    where?: ViaturaWhereInput
  }

  export type ViaturaUpdateToOneWithWhereWithoutMarcacaoInput = {
    where?: ViaturaWhereInput
    data: XOR<ViaturaUpdateWithoutMarcacaoInput, ViaturaUncheckedUpdateWithoutMarcacaoInput>
  }

  export type ViaturaUpdateWithoutMarcacaoInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    proprietario?: UtilizadorUpdateOneRequiredWithoutViaturasNestedInput
    manutencoes?: ManutencaoUpdateManyWithoutViaturaNestedInput
  }

  export type ViaturaUncheckedUpdateWithoutMarcacaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    proprietarioId?: IntFieldUpdateOperationsInput | number
    manutencoes?: ManutencaoUncheckedUpdateManyWithoutViaturaNestedInput
  }

  export type ViaturaCreateManyProprietarioInput = {
    id?: number
    modelo: string
    ano: number
  }

  export type ViaturaUpdateWithoutProprietarioInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    manutencoes?: ManutencaoUpdateManyWithoutViaturaNestedInput
    Marcacao?: MarcacaoUpdateManyWithoutViaturaNestedInput
  }

  export type ViaturaUncheckedUpdateWithoutProprietarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    manutencoes?: ManutencaoUncheckedUpdateManyWithoutViaturaNestedInput
    Marcacao?: MarcacaoUncheckedUpdateManyWithoutViaturaNestedInput
  }

  export type ViaturaUncheckedUpdateManyWithoutProprietarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
  }

  export type ManutencaoCreateManyViaturaInput = {
    id?: number
    descricao: string
    data: Date | string
    custo: number
    categoriaId: number
  }

  export type MarcacaoCreateManyViaturaInput = {
    id?: number
    data: Date | string
    descricao: string
  }

  export type ManutencaoUpdateWithoutViaturaInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    custo?: FloatFieldUpdateOperationsInput | number
    categoria?: CategoriaUpdateOneRequiredWithoutManutencoesNestedInput
  }

  export type ManutencaoUncheckedUpdateWithoutViaturaInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    custo?: FloatFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
  }

  export type ManutencaoUncheckedUpdateManyWithoutViaturaInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    custo?: FloatFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
  }

  export type MarcacaoUpdateWithoutViaturaInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type MarcacaoUncheckedUpdateWithoutViaturaInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type MarcacaoUncheckedUpdateManyWithoutViaturaInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type ManutencaoCreateManyCategoriaInput = {
    id?: number
    descricao: string
    data: Date | string
    custo: number
    viaturaId: number
  }

  export type ManutencaoUpdateWithoutCategoriaInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    custo?: FloatFieldUpdateOperationsInput | number
    viatura?: ViaturaUpdateOneRequiredWithoutManutencoesNestedInput
  }

  export type ManutencaoUncheckedUpdateWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    custo?: FloatFieldUpdateOperationsInput | number
    viaturaId?: IntFieldUpdateOperationsInput | number
  }

  export type ManutencaoUncheckedUpdateManyWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    custo?: FloatFieldUpdateOperationsInput | number
    viaturaId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UtilizadorCountOutputTypeDefaultArgs instead
     */
    export type UtilizadorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UtilizadorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ViaturaCountOutputTypeDefaultArgs instead
     */
    export type ViaturaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ViaturaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriaCountOutputTypeDefaultArgs instead
     */
    export type CategoriaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UtilizadorDefaultArgs instead
     */
    export type UtilizadorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UtilizadorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ViaturaDefaultArgs instead
     */
    export type ViaturaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ViaturaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ManutencaoDefaultArgs instead
     */
    export type ManutencaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ManutencaoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriaDefaultArgs instead
     */
    export type CategoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MarcacaoDefaultArgs instead
     */
    export type MarcacaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MarcacaoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}